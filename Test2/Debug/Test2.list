
Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007e8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000858  20000858  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d1  00000000  00000000  00031174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00033348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c60  00000000  00000000  00034080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026180  00000000  00000000  00034ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1fa  00000000  00000000  0005ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3fb0  00000000  00000000  0006a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e00a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043ac  00000000  00000000  0014e05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005754 	.word	0x08005754

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005754 	.word	0x08005754

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char time[14];
	//char date[30];
	bool timeset = false;
 800059a:	2300      	movs	r3, #0
 800059c:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fdd1 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f85b 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f9c5 	bl	8000934 <MX_GPIO_Init>
  MX_ETH_Init();
 80005aa:	f000 f8c3 	bl	8000734 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ae:	f000 f969 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b2:	f000 f991 	bl	80008d8 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80005b6:	f000 f90b 	bl	80007d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  while(!timeset){
 80005ba:	e01b      	b.n	80005f4 <main+0x60>
	  if (HAL_UART_Receive(&huart3, (uint8_t *) currentTime, sizeof(currentTime), 1000) == HAL_OK){
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	2209      	movs	r2, #9
 80005c4:	481f      	ldr	r0, [pc, #124]	; (8000644 <main+0xb0>)
 80005c6:	f002 ff43 	bl	8003450 <HAL_UART_Receive>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d111      	bne.n	80005f4 <main+0x60>
		  if (currentTime[8]=='*'){
 80005d0:	7b3b      	ldrb	r3, [r7, #12]
 80005d2:	2b2a      	cmp	r3, #42	; 0x2a
 80005d4:	d10e      	bne.n	80005f4 <main+0x60>
			  //Time Correctly recorded
			  currentTime[8]='\0';
 80005d6:	2300      	movs	r3, #0
 80005d8:	733b      	strb	r3, [r7, #12]
			  setRTCTime(currentTime);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fa57 	bl	8000a90 <setRTCTime>
			  HAL_UART_Transmit(&huart3, (uint8_t *)"set\n", sizeof((uint8_t *)"set"), 100);
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	2204      	movs	r2, #4
 80005e6:	4918      	ldr	r1, [pc, #96]	; (8000648 <main+0xb4>)
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <main+0xb0>)
 80005ea:	f002 fe9f 	bl	800332c <HAL_UART_Transmit>
			  timeset = true;
 80005ee:	2301      	movs	r3, #1
 80005f0:	77fb      	strb	r3, [r7, #31]
			  break;
 80005f2:	e002      	b.n	80005fa <main+0x66>
  while(!timeset){
 80005f4:	7ffb      	ldrb	r3, [r7, #31]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0e0      	beq.n	80005bc <main+0x28>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005fa:	2200      	movs	r2, #0
 80005fc:	4913      	ldr	r1, [pc, #76]	; (800064c <main+0xb8>)
 80005fe:	4814      	ldr	r0, [pc, #80]	; (8000650 <main+0xbc>)
 8000600:	f002 fca8 	bl	8002f54 <HAL_RTC_GetTime>

	  sprintf(time, "Time:%02d:%02d:%02d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <main+0xb8>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <main+0xb8>)
 800060c:	785b      	ldrb	r3, [r3, #1]
 800060e:	4619      	mov	r1, r3
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <main+0xb8>)
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	f107 0010 	add.w	r0, r7, #16
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	460b      	mov	r3, r1
 800061c:	490d      	ldr	r1, [pc, #52]	; (8000654 <main+0xc0>)
 800061e:	f003 fdd3 	bl	80041c8 <siprintf>

	  HAL_UART_Transmit(&huart3, (uint8_t *) time, sizeof(time), 100);
 8000622:	f107 0110 	add.w	r1, r7, #16
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	220e      	movs	r2, #14
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <main+0xb0>)
 800062c:	f002 fe7e 	bl	800332c <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0xc4>)
 8000634:	f001 fbef 	bl	8001e16 <HAL_GPIO_TogglePin>
	 HAL_Delay(2000);
 8000638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063c:	f000 fdf4 	bl	8001228 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000640:	e7db      	b.n	80005fa <main+0x66>
 8000642:	bf00      	nop
 8000644:	200002d4 	.word	0x200002d4
 8000648:	0800576c 	.word	0x0800576c
 800064c:	20000824 	.word	0x20000824
 8000650:	200002b4 	.word	0x200002b4
 8000654:	08005774 	.word	0x08005774
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fda4 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <SystemClock_Config+0xd4>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006b8:	2309      	movs	r3, #9
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c2:	2301      	movs	r3, #1
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006dc:	2307      	movs	r3, #7
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fccd 	bl	8002084 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f0:	f000 fa3c 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f001 ff2e 	bl	8002574 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 fa25 	bl	8000b6c <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ETH_Init+0x84>)
 800073a:	4a20      	ldr	r2, [pc, #128]	; (80007bc <MX_ETH_Init+0x88>)
 800073c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_ETH_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ETH_Init+0x8c>)
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ETH_Init+0x8c>)
 800074c:	22e1      	movs	r2, #225	; 0xe1
 800074e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ETH_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_ETH_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ETH_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_ETH_Init+0x84>)
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <MX_ETH_Init+0x8c>)
 8000766:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_ETH_Init+0x84>)
 800076a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800076e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_ETH_Init+0x84>)
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <MX_ETH_Init+0x90>)
 8000774:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_ETH_Init+0x84>)
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_ETH_Init+0x94>)
 800077a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_ETH_Init+0x84>)
 800077e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000782:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_ETH_Init+0x84>)
 8000786:	f000 fe59 	bl	800143c <HAL_ETH_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f9ec 	bl	8000b6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000794:	2238      	movs	r2, #56	; 0x38
 8000796:	2100      	movs	r1, #0
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_ETH_Init+0x98>)
 800079a:	f003 fd0d 	bl	80041b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_ETH_Init+0x98>)
 80007a0:	2221      	movs	r2, #33	; 0x21
 80007a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_ETH_Init+0x98>)
 80007a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_ETH_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000204 	.word	0x20000204
 80007bc:	40028000 	.word	0x40028000
 80007c0:	20000838 	.word	0x20000838
 80007c4:	20000164 	.word	0x20000164
 80007c8:	200000c4 	.word	0x200000c4
 80007cc:	2000008c 	.word	0x2000008c

080007d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_RTC_Init+0xac>)
 80007ea:	4a25      	ldr	r2, [pc, #148]	; (8000880 <MX_RTC_Init+0xb0>)
 80007ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_RTC_Init+0xac>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_RTC_Init+0xac>)
 80007f6:	227f      	movs	r2, #127	; 0x7f
 80007f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_RTC_Init+0xac>)
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_RTC_Init+0xac>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_RTC_Init+0xac>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_RTC_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_RTC_Init+0xac>)
 8000814:	f002 fa8e 	bl	8002d34 <HAL_RTC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f9a5 	bl	8000b6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000822:	2300      	movs	r3, #0
 8000824:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000826:	2300      	movs	r3, #0
 8000828:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800082a:	2300      	movs	r3, #0
 800082c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2201      	movs	r2, #1
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_RTC_Init+0xac>)
 800083e:	f002 faef 	bl	8002e20 <HAL_RTC_SetTime>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 f990 	bl	8000b6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800084c:	2301      	movs	r3, #1
 800084e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000850:	2301      	movs	r3, #1
 8000852:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000854:	2301      	movs	r3, #1
 8000856:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000858:	2300      	movs	r3, #0
 800085a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_RTC_Init+0xac>)
 8000864:	f002 fbd4 	bl	8003010 <HAL_RTC_SetDate>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800086e:	f000 f97d 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200002b4 	.word	0x200002b4
 8000880:	40002800 	.word	0x40002800

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART3_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008bc:	f002 fce9 	bl	8003292 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f951 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200002d4 	.word	0x200002d4
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2201      	movs	r2, #1
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	f001 fa95 	bl	8001e4a <HAL_PCD_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f921 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000318 	.word	0x20000318

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a4b      	ldr	r2, [pc, #300]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3d      	ldr	r2, [pc, #244]	; (8000a80 <MX_GPIO_Init+0x14c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <MX_GPIO_Init+0x150>)
 80009fa:	f001 f9f3 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_GPIO_Init+0x154>)
 8000a04:	f001 f9ee 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481b      	ldr	r0, [pc, #108]	; (8000a8c <MX_GPIO_Init+0x158>)
 8000a20:	f001 f834 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_GPIO_Init+0x150>)
 8000a3e:	f001 f825 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x154>)
 8000a5a:	f001 f817 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x154>)
 8000a72:	f001 f80b 	bl	8001a8c <HAL_GPIO_Init>

}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40020800 	.word	0x40020800

08000a90 <setRTCTime>:
 * @brief Set Initial RTC Values
 * @retval None
 */

static void setRTCTime(char* inputTime)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	char *delim = ":";
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <setRTCTime+0xcc>)
 8000a9a:	61fb      	str	r3, [r7, #28]
	char hours[] ="00";
 8000a9c:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <setRTCTime+0xd0>)
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	8019      	strh	r1, [r3, #0]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	0c12      	lsrs	r2, r2, #16
 8000aac:	701a      	strb	r2, [r3, #0]
	char minutes[]="00";
 8000aae:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <setRTCTime+0xd0>)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	8019      	strh	r1, [r3, #0]
 8000aba:	3302      	adds	r3, #2
 8000abc:	0c12      	lsrs	r2, r2, #16
 8000abe:	701a      	strb	r2, [r3, #0]
	char seconds[]="00";
 8000ac0:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <setRTCTime+0xd0>)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	8019      	strh	r1, [r3, #0]
 8000acc:	3302      	adds	r3, #2
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	701a      	strb	r2, [r3, #0]

	char *token = strtok(inputTime, delim);
 8000ad2:	69f9      	ldr	r1, [r7, #28]
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f003 fb9f 	bl	8004218 <strtok>
 8000ada:	61b8      	str	r0, [r7, #24]
	strcpy(hours, token);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fb90 	bl	8004208 <strcpy>
	token = strtok(NULL, delim);
 8000ae8:	69f9      	ldr	r1, [r7, #28]
 8000aea:	2000      	movs	r0, #0
 8000aec:	f003 fb94 	bl	8004218 <strtok>
 8000af0:	61b8      	str	r0, [r7, #24]
	strcpy(minutes, token);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	69b9      	ldr	r1, [r7, #24]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fb85 	bl	8004208 <strcpy>
	token = strtok(NULL, delim);
 8000afe:	69f9      	ldr	r1, [r7, #28]
 8000b00:	2000      	movs	r0, #0
 8000b02:	f003 fb89 	bl	8004218 <strtok>
 8000b06:	61b8      	str	r0, [r7, #24]
	strcpy(seconds, token);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	69b9      	ldr	r1, [r7, #24]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fb7a 	bl	8004208 <strcpy>
	sTime.Hours = (uint8_t)atoi(hours);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fb1f 	bl	800415c <atoi>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <setRTCTime+0xd4>)
 8000b24:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = (uint8_t)(uint8_t)atoi(minutes);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fb16 	bl	800415c <atoi>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <setRTCTime+0xd4>)
 8000b36:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = (uint8_t)(uint8_t)atoi(seconds);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fb0d 	bl	800415c <atoi>
 8000b42:	4603      	mov	r3, r0
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <setRTCTime+0xd4>)
 8000b48:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4905      	ldr	r1, [pc, #20]	; (8000b64 <setRTCTime+0xd4>)
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <setRTCTime+0xd8>)
 8000b50:	f002 f966 	bl	8002e20 <HAL_RTC_SetTime>

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	0800578c 	.word	0x0800578c
 8000b60:	08005790 	.word	0x08005790
 8000b64:	20000824 	.word	0x20000824
 8000b68:	200002b4 	.word	0x200002b4

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	; 0x38
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a55      	ldr	r2, [pc, #340]	; (8000d3c <HAL_ETH_MspInit+0x174>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	f040 80a4 	bne.w	8000d34 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a52      	ldr	r2, [pc, #328]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfc:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c04:	623b      	str	r3, [r7, #32]
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a4b      	ldr	r2, [pc, #300]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <HAL_ETH_MspInit+0x178>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cb0:	2332      	movs	r3, #50	; 0x32
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <HAL_ETH_MspInit+0x17c>)
 8000ccc:	f000 fede 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cd0:	2386      	movs	r3, #134	; 0x86
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4817      	ldr	r0, [pc, #92]	; (8000d48 <HAL_ETH_MspInit+0x180>)
 8000cec:	f000 fece 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d02:	230b      	movs	r3, #11
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <HAL_ETH_MspInit+0x184>)
 8000d0e:	f000 febd 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d24:	230b      	movs	r3, #11
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <HAL_ETH_MspInit+0x188>)
 8000d30:	f000 feac 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40028000 	.word	0x40028000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40021800 	.word	0x40021800

08000d54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	2230      	movs	r2, #48	; 0x30
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fa27 	bl	80041b8 <memset>
  if(hrtc->Instance==RTC)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <HAL_RTC_MspInit+0x4c>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d111      	bne.n	8000d98 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d74:	2320      	movs	r3, #32
 8000d76:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fe16 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d8e:	f7ff feed 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_RTC_MspInit+0x50>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40002800 	.word	0x40002800
 8000da4:	42470e3c 	.word	0x42470e3c

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_UART_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12c      	bne.n	8000e24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_UART_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e14:	2307      	movs	r3, #7
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_UART_MspInit+0x8c>)
 8000e20:	f000 fe34 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40004800 	.word	0x40004800
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e58:	d13f      	bne.n	8000eda <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4815      	ldr	r0, [pc, #84]	; (8000ee8 <HAL_PCD_MspInit+0xb0>)
 8000e94:	f000 fdfa 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <HAL_PCD_MspInit+0xb0>)
 8000eae:	f000 fded 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ebc:	6353      	str	r3, [r2, #52]	; 0x34
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_PCD_MspInit+0xac>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f956 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return 1;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_kill>:

int _kill(int pid, int sig)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f5a:	f003 f903 	bl	8004164 <__errno>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2216      	movs	r2, #22
 8000f62:	601a      	str	r2, [r3, #0]
  return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_exit>:

void _exit (int status)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ffe7 	bl	8000f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f82:	e7fe      	b.n	8000f82 <_exit+0x12>

08000f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
  }

  return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x12>
  }
  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	605a      	str	r2, [r3, #4]
  return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f003 f868 	bl	8004164 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20030000 	.word	0x20030000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	20000840 	.word	0x20000840
 80010c8:	20000858 	.word	0x20000858

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800110c:	4c0b      	ldr	r4, [pc, #44]	; (800113c <LoopFillZerobss+0x26>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111a:	f7ff ffd7 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f003 f827 	bl	8004170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fa37 	bl	8000594 <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001128:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001134:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 8001138:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800113c:	20000858 	.word	0x20000858

08001140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_Init+0x40>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x40>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f931 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fcfe 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f93b 	bl	8001422 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f911 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20000844 	.word	0x20000844

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000844 	.word	0x20000844

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff47 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff5c 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffb0 	bl	8001390 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06c      	b.n	8001528 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001454:	2b00      	cmp	r3, #0
 8001456:	d106      	bne.n	8001466 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2223      	movs	r2, #35	; 0x23
 800145c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fbb1 	bl	8000bc8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_ETH_Init+0xf4>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a30      	ldr	r2, [pc, #192]	; (8001530 <HAL_ETH_Init+0xf4>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_ETH_Init+0xf4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001482:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800148c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4927      	ldr	r1, [pc, #156]	; (8001534 <HAL_ETH_Init+0xf8>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_ETH_Init+0xf8>)
 800149e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff feaa 	bl	8001210 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014be:	e011      	b.n	80014e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014c0:	f7ff fea6 	bl	8001210 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ce:	d909      	bls.n	80014e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	22e0      	movs	r2, #224	; 0xe0
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e021      	b.n	8001528 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e4      	bne.n	80014c0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f958 	bl	80017ac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f9ff 	bl	8001900 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fa55 	bl	80019b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	461a      	mov	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f9bd 	bl	8001890 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2210      	movs	r2, #16
 8001522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800

08001538 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4b51      	ldr	r3, [pc, #324]	; (8001694 <ETH_SetMACConfig+0x15c>)
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7c1b      	ldrb	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <ETH_SetMACConfig+0x28>
 800155a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800155e:	e000      	b.n	8001562 <ETH_SetMACConfig+0x2a>
 8001560:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7c5b      	ldrb	r3, [r3, #17]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <ETH_SetMACConfig+0x38>
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	e000      	b.n	8001572 <ETH_SetMACConfig+0x3a>
 8001570:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001572:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001578:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7fdb      	ldrb	r3, [r3, #31]
 800157e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001580:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001586:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	7f92      	ldrb	r2, [r2, #30]
 800158c:	2a00      	cmp	r2, #0
 800158e:	d102      	bne.n	8001596 <ETH_SetMACConfig+0x5e>
 8001590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001594:	e000      	b.n	8001598 <ETH_SetMACConfig+0x60>
 8001596:	2200      	movs	r2, #0
                        macconf->Speed |
 8001598:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7f1b      	ldrb	r3, [r3, #28]
 800159e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d102      	bne.n	80015c0 <ETH_SetMACConfig+0x88>
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	e000      	b.n	80015c2 <ETH_SetMACConfig+0x8a>
 80015c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7bdb      	ldrb	r3, [r3, #15]
 80015c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015da:	4313      	orrs	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fe18 	bl	8001228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800160e:	4013      	ands	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800161e:	2a00      	cmp	r2, #0
 8001620:	d101      	bne.n	8001626 <ETH_SetMACConfig+0xee>
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	e000      	b.n	8001628 <ETH_SetMACConfig+0xf0>
 8001626:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001628:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800162e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001636:	2a01      	cmp	r2, #1
 8001638:	d101      	bne.n	800163e <ETH_SetMACConfig+0x106>
 800163a:	2208      	movs	r2, #8
 800163c:	e000      	b.n	8001640 <ETH_SetMACConfig+0x108>
 800163e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001640:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001648:	2a01      	cmp	r2, #1
 800164a:	d101      	bne.n	8001650 <ETH_SetMACConfig+0x118>
 800164c:	2204      	movs	r2, #4
 800164e:	e000      	b.n	8001652 <ETH_SetMACConfig+0x11a>
 8001650:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001652:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800165a:	2a01      	cmp	r2, #1
 800165c:	d101      	bne.n	8001662 <ETH_SetMACConfig+0x12a>
 800165e:	2202      	movs	r2, #2
 8001660:	e000      	b.n	8001664 <ETH_SetMACConfig+0x12c>
 8001662:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001664:	4313      	orrs	r3, r2
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fdd3 	bl	8001228 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	ff20810f 	.word	0xff20810f

08001698 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <ETH_SetDMAConfig+0x110>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	7b1b      	ldrb	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <ETH_SetDMAConfig+0x2c>
 80016be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016c2:	e000      	b.n	80016c6 <ETH_SetDMAConfig+0x2e>
 80016c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	7b5b      	ldrb	r3, [r3, #13]
 80016ca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016cc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	7f52      	ldrb	r2, [r2, #29]
 80016d2:	2a00      	cmp	r2, #0
 80016d4:	d102      	bne.n	80016dc <ETH_SetDMAConfig+0x44>
 80016d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016da:	e000      	b.n	80016de <ETH_SetDMAConfig+0x46>
 80016dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	7b9b      	ldrb	r3, [r3, #14]
 80016e4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016e6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	7f1b      	ldrb	r3, [r3, #28]
 80016f2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	7f9b      	ldrb	r3, [r3, #30]
 80016fa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016fc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001702:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800170c:	4313      	orrs	r3, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fd7a 	bl	8001228 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	461a      	mov	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800174c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001752:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001758:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001760:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001762:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800176a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001770:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800177e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fd4b 	bl	8001228 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	f8de3f23 	.word	0xf8de3f23

080017ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0a6      	sub	sp, #152	; 0x98
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e8:	2300      	movs	r3, #0
 80017ea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800180e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001812:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001818:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001820:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fe86 	bl	8001538 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800182c:	2301      	movs	r3, #1
 800182e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001834:	2301      	movs	r3, #1
 8001836:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800183a:	2301      	movs	r3, #1
 800183c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001858:	2301      	movs	r3, #1
 800185a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800185c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001860:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001866:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff08 	bl	8001698 <ETH_SetDMAConfig>
}
 8001888:	bf00      	nop
 800188a:	3798      	adds	r7, #152	; 0x98
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3305      	adds	r3, #5
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	3204      	adds	r2, #4
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <ETH_MACAddressConfig+0x68>)
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3303      	adds	r3, #3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	061a      	lsls	r2, r3, #24
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3302      	adds	r3, #2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	4313      	orrs	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <ETH_MACAddressConfig+0x6c>)
 80018e2:	4413      	add	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40028040 	.word	0x40028040
 80018fc:	40028044 	.word	0x40028044

08001900 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e03e      	b.n	800198c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68d9      	ldr	r1, [r3, #12]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	3206      	adds	r2, #6
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d80c      	bhi.n	8001970 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68d9      	ldr	r1, [r3, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	e004      	b.n	800197a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d9bd      	bls.n	800190e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	611a      	str	r2, [r3, #16]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e046      	b.n	8001a4e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6919      	ldr	r1, [r3, #16]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a04:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	3212      	adds	r2, #18
 8001a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d80c      	bhi.n	8001a3e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6919      	ldr	r1, [r3, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	e004      	b.n	8001a48 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d9b5      	bls.n	80019c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	60da      	str	r2, [r3, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e177      	b.n	8001d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8166 	bne.w	8001d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80c0 	beq.w	8001d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a61      	ldr	r2, [pc, #388]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d037      	beq.n	8001cca <HAL_GPIO_Init+0x23e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d031      	beq.n	8001cc6 <HAL_GPIO_Init+0x23a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d02b      	beq.n	8001cc2 <HAL_GPIO_Init+0x236>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_GPIO_Init+0x338>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d025      	beq.n	8001cbe <HAL_GPIO_Init+0x232>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_GPIO_Init+0x33c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01f      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_GPIO_Init+0x340>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d019      	beq.n	8001cb6 <HAL_GPIO_Init+0x22a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x344>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x348>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a50      	ldr	r2, [pc, #320]	; (8001dd8 <HAL_GPIO_Init+0x34c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001ca2:	2309      	movs	r3, #9
 8001ca4:	e012      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	e010      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae84 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40021c00 	.word	0x40021c00
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40022400 	.word	0x40022400
 8001de0:	40013c00 	.word	0x40013c00

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	619a      	str	r2, [r3, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e28:	887a      	ldrh	r2, [r7, #2]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	041a      	lsls	r2, r3, #16
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	400b      	ands	r3, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4c:	b08f      	sub	sp, #60	; 0x3c
 8001e4e:	af0a      	add	r7, sp, #40	; 0x28
 8001e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e10f      	b.n	800207c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe ffde 	bl	8000e38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 febd 	bl	8003c1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	687e      	ldr	r6, [r7, #4]
 8001ea8:	466d      	mov	r5, sp
 8001eaa:	f106 0410 	add.w	r4, r6, #16
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ebe:	1d33      	adds	r3, r6, #4
 8001ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f001 fe48 	bl	8003b58 <USB_CoreInit>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0d0      	b.n	800207c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 feab 	bl	8003c3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e04a      	b.n	8001f82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	333d      	adds	r3, #61	; 0x3d
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	333c      	adds	r3, #60	; 0x3c
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3344      	adds	r3, #68	; 0x44
 8001f28:	4602      	mov	r2, r0
 8001f2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3340      	adds	r3, #64	; 0x40
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3348      	adds	r3, #72	; 0x48
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	334c      	adds	r3, #76	; 0x4c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3354      	adds	r3, #84	; 0x54
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3af      	bcc.n	8001eec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e044      	b.n	800201c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3b5      	bcc.n	8001f92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	687e      	ldr	r6, [r7, #4]
 800202e:	466d      	mov	r5, sp
 8002030:	f106 0410 	add.w	r4, r6, #16
 8002034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002040:	e885 0003 	stmia.w	r5, {r0, r1}
 8002044:	1d33      	adds	r3, r6, #4
 8002046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f001 fe43 	bl	8003cd4 <USB_DevInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e00d      	b.n	800207c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 f80e 	bl	8004096 <USB_DevDisconnect>

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e267      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d075      	beq.n	800218e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d00c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ae:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d112      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05b      	beq.n	800218c <HAL_RCC_OscConfig+0x108>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d157      	bne.n	800218c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e242      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x74>
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x98>
 8002102:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 800211c:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a65      	ldr	r2, [pc, #404]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff f868 	bl	8001210 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff f864 	bl	8001210 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e207      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xc0>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff f854 	bl	8001210 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff f850 	bl	8001210 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1f3      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0xe8>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x152>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1c7      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4937      	ldr	r1, [pc, #220]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	e03a      	b.n	8002262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x244>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f809 	bl	8001210 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff f805 	bl	8001210 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1a8      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4925      	ldr	r1, [pc, #148]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x244>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe ffe8 	bl	8001210 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002244:	f7fe ffe4 	bl	8001210 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e187      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d036      	beq.n	80022dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_RCC_OscConfig+0x248>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7fe ffc8 	bl	8001210 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002284:	f7fe ffc4 	bl	8001210 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e167      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x200>
 80022a2:	e01b      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_OscConfig+0x248>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7fe ffb1 	bl	8001210 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	e00e      	b.n	80022d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7fe ffad 	bl	8001210 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d907      	bls.n	80022d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e150      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	42470000 	.word	0x42470000
 80022cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ea      	bne.n	80022b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8097 	beq.w	8002418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a7c      	ldr	r2, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a73      	ldr	r2, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe ff6d 	bl	8001210 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe ff69 	bl	8001210 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e10c      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x2ea>
 8002360:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a63      	ldr	r2, [pc, #396]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	e01c      	b.n	80023a8 <HAL_RCC_OscConfig+0x324>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x30c>
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5b      	ldr	r2, [pc, #364]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x324>
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe ff2e 	bl	8001210 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe ff2a 	bl	8001210 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0cb      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0ee      	beq.n	80023b8 <HAL_RCC_OscConfig+0x334>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7fe ff18 	bl	8001210 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe ff14 	bl	8001210 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0b5      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a1 	beq.w	8002564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d05c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d141      	bne.n	80024ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fee8 	bl	8001210 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fee4 	bl	8001210 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e087      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	491b      	ldr	r1, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe febd 	bl	8001210 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe feb9 	bl	8001210 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e05c      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x416>
 80024b8:	e054      	b.n	8002564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fea6 	bl	8001210 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe fea2 	bl	8001210 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e045      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x444>
 80024e6:	e03d      	b.n	8002564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e038      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000
 80024fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4ec>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d028      	beq.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d121      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d11a      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	3b01      	subs	r3, #1
 800254a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0cc      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d90c      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d044      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d119      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	2b03      	cmp	r3, #3
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e067      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4934      	ldr	r1, [pc, #208]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7fe fdd4 	bl	8001210 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7fe fdd0 	bl	8001210 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e04f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d20c      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fd34 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00
 8002730:	40023800 	.word	0x40023800
 8002734:	08005794 	.word	0x08005794
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b094      	sub	sp, #80	; 0x50
 8002746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
 800274c:	2300      	movs	r3, #0
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002750:	2300      	movs	r3, #0
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d00d      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x40>
 8002764:	2b08      	cmp	r3, #8
 8002766:	f200 80e1 	bhi.w	800292c <HAL_RCC_GetSysClockFreq+0x1ec>
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x34>
 800276e:	2b04      	cmp	r3, #4
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x3a>
 8002772:	e0db      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <HAL_RCC_GetSysClockFreq+0x204>)
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002778:	e0db      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_GetSysClockFreq+0x208>)
 800277c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800277e:	e0d8      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	2200      	movs	r2, #0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
 80027ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027b2:	4622      	mov	r2, r4
 80027b4:	462b      	mov	r3, r5
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4621      	mov	r1, r4
 80027cc:	1a51      	subs	r1, r2, r1
 80027ce:	6139      	str	r1, [r7, #16]
 80027d0:	4629      	mov	r1, r5
 80027d2:	eb63 0301 	sbc.w	r3, r3, r1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e4:	4659      	mov	r1, fp
 80027e6:	018b      	lsls	r3, r1, #6
 80027e8:	4651      	mov	r1, sl
 80027ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ee:	4651      	mov	r1, sl
 80027f0:	018a      	lsls	r2, r1, #6
 80027f2:	4651      	mov	r1, sl
 80027f4:	ebb2 0801 	subs.w	r8, r2, r1
 80027f8:	4659      	mov	r1, fp
 80027fa:	eb63 0901 	sbc.w	r9, r3, r1
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002812:	4690      	mov	r8, r2
 8002814:	4699      	mov	r9, r3
 8002816:	4623      	mov	r3, r4
 8002818:	eb18 0303 	adds.w	r3, r8, r3
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	462b      	mov	r3, r5
 8002820:	eb49 0303 	adc.w	r3, r9, r3
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002832:	4629      	mov	r1, r5
 8002834:	024b      	lsls	r3, r1, #9
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283c:	4621      	mov	r1, r4
 800283e:	024a      	lsls	r2, r1, #9
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002846:	2200      	movs	r2, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
 800284a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002850:	f7fd fd1e 	bl	8000290 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	e058      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	2200      	movs	r2, #0
 8002866:	4618      	mov	r0, r3
 8002868:	4611      	mov	r1, r2
 800286a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
 8002874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	0159      	lsls	r1, r3, #5
 8002886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288a:	0150      	lsls	r0, r2, #5
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4641      	mov	r1, r8
 8002892:	ebb2 0a01 	subs.w	sl, r2, r1
 8002896:	4649      	mov	r1, r9
 8002898:	eb63 0b01 	sbc.w	fp, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b0:	ebb2 040a 	subs.w	r4, r2, sl
 80028b4:	eb63 050b 	sbc.w	r5, r3, fp
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	00eb      	lsls	r3, r5, #3
 80028c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c6:	00e2      	lsls	r2, r4, #3
 80028c8:	4614      	mov	r4, r2
 80028ca:	461d      	mov	r5, r3
 80028cc:	4643      	mov	r3, r8
 80028ce:	18e3      	adds	r3, r4, r3
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	464b      	mov	r3, r9
 80028d4:	eb45 0303 	adc.w	r3, r5, r3
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e6:	4629      	mov	r1, r5
 80028e8:	028b      	lsls	r3, r1, #10
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f0:	4621      	mov	r1, r4
 80028f2:	028a      	lsls	r2, r1, #10
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	2200      	movs	r2, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	61fa      	str	r2, [r7, #28]
 8002900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002904:	f7fd fcc4 	bl	8000290 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetSysClockFreq+0x204>)
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002934:	4618      	mov	r0, r3
 8002936:	3750      	adds	r7, #80	; 0x50
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400
 8002948:	007a1200 	.word	0x007a1200

0800294c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff0 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	080057a4 	.word	0x080057a4

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffdc 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	080057a4 	.word	0x080057a4

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d075      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029e8:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029ee:	f7fe fc0f 	bl	8001210 <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029f6:	f7fe fc0b 	bl	8001210 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e189      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a08:	4b8a      	ldr	r3, [pc, #552]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	019a      	lsls	r2, r3, #6
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	071b      	lsls	r3, r3, #28
 8002a2c:	4981      	ldr	r1, [pc, #516]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01f      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a40:	4b7c      	ldr	r3, [pc, #496]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0f1b      	lsrs	r3, r3, #28
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	071b      	lsls	r3, r3, #28
 8002a60:	4974      	ldr	r1, [pc, #464]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a68:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a6e:	f023 021f 	bic.w	r2, r3, #31
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	496e      	ldr	r1, [pc, #440]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	019a      	lsls	r2, r3, #6
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	071b      	lsls	r3, r3, #28
 8002aa0:	4964      	ldr	r1, [pc, #400]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aa8:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aae:	f7fe fbaf 	bl	8001210 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ab6:	f7fe fbab 	bl	8001210 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e129      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac8:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d079      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aec:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af2:	f7fe fb8d 	bl	8001210 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002afa:	f7fe fb89 	bl	8001210 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e107      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b0c:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b18:	d0ef      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0f1b      	lsrs	r3, r3, #28
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	019a      	lsls	r2, r3, #6
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	431a      	orrs	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	493b      	ldr	r1, [pc, #236]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b4e:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4934      	ldr	r1, [pc, #208]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01e      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	0e1b      	lsrs	r3, r3, #24
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	019a      	lsls	r2, r3, #6
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	071b      	lsls	r3, r3, #28
 8002b94:	4927      	ldr	r1, [pc, #156]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	4922      	ldr	r1, [pc, #136]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fb2a 	bl	8001210 <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bc0:	f7fe fb26 	bl	8001210 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0a4      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bde:	d1ef      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 808b 	beq.w	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c16:	f7fe fafb 	bl	8001210 <HAL_GetTick>
 8002c1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c1c:	e010      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe faf7 	bl	8001210 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d909      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e075      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002c30:	42470068 	.word	0x42470068
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470070 	.word	0x42470070
 8002c3c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c40:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0e8      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02f      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d028      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6a:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c80:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d114      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fabd 	bl	8001210 <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fab9 	bl	8001210 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e035      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cde:	4912      	ldr	r1, [pc, #72]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002d18:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40007000 	.word	0x40007000
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	42470e40 	.word	0x42470e40
 8002d30:	424711e0 	.word	0x424711e0

08002d34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e066      	b.n	8002e18 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7f5b      	ldrb	r3, [r3, #29]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fd fffa 	bl	8000d54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	22ca      	movs	r2, #202	; 0xca
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2253      	movs	r2, #83	; 0x53
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f9f6 	bl	8003168 <RTC_EnterInitMode>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d12c      	bne.n	8002de0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68d2      	ldr	r2, [r2, #12]
 8002dc0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6919      	ldr	r1, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	041a      	lsls	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f9fd 	bl	80031d6 <RTC_ExitInitMode>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d113      	bne.n	8002e0e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	7f1b      	ldrb	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_RTC_SetTime+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e087      	b.n	8002f4c <HAL_RTC_SetTime+0x12c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2202      	movs	r2, #2
 8002e46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d126      	bne.n	8002e9c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f9da 	bl	8003220 <RTC_ByteToBcd2>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f9d3 	bl	8003220 <RTC_ByteToBcd2>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e7e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	789b      	ldrb	r3, [r3, #2]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f9cb 	bl	8003220 <RTC_ByteToBcd2>
 8002e8a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e8c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	78db      	ldrb	r3, [r3, #3]
 8002e94:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e018      	b.n	8002ece <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ebc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ec2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	78db      	ldrb	r3, [r3, #3]
 8002ec8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	22ca      	movs	r2, #202	; 0xca
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2253      	movs	r2, #83	; 0x53
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f942 	bl	8003168 <RTC_EnterInitMode>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d120      	bne.n	8002f30 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ef8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002efc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f955 	bl	80031d6 <RTC_ExitInitMode>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	771a      	strb	r2, [r3, #28]

  return status;
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	0d9b      	lsrs	r3, r3, #22
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11a      	bne.n	8003006 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f940 	bl	800325a <RTC_Bcd2ToByte>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f937 	bl	800325a <RTC_Bcd2ToByte>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	789b      	ldrb	r3, [r3, #2]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f92e 	bl	800325a <RTC_Bcd2ToByte>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	7f1b      	ldrb	r3, [r3, #28]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_RTC_SetDate+0x1c>
 8003028:	2302      	movs	r3, #2
 800302a:	e071      	b.n	8003110 <HAL_RTC_SetDate+0x100>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2202      	movs	r2, #2
 8003036:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_RTC_SetDate+0x4c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	330a      	adds	r3, #10
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11c      	bne.n	800309c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	78db      	ldrb	r3, [r3, #3]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f8da 	bl	8003220 <RTC_ByteToBcd2>
 800306c:	4603      	mov	r3, r0
 800306e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f8d3 	bl	8003220 <RTC_ByteToBcd2>
 800307a:	4603      	mov	r3, r0
 800307c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800307e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	789b      	ldrb	r3, [r3, #2]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f8cb 	bl	8003220 <RTC_ByteToBcd2>
 800308a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800308c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e00e      	b.n	80030ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	78db      	ldrb	r3, [r3, #3]
 80030a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80030a8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80030ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ca      	movs	r2, #202	; 0xca
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2253      	movs	r2, #83	; 0x53
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f84c 	bl	8003168 <RTC_EnterInitMode>
 80030d0:	4603      	mov	r3, r0
 80030d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f873 	bl	80031d6 <RTC_ExitInitMode>
 80030f0:	4603      	mov	r3, r0
 80030f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	771a      	strb	r2, [r3, #28]

  return status;
 800310e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003132:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7fe f86c 	bl	8001210 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800313a:	e009      	b.n	8003150 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800313c:	f7fe f868 	bl	8001210 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314a:	d901      	bls.n	8003150 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e007      	b.n	8003160 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0ee      	beq.n	800313c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d122      	bne.n	80031cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003194:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003196:	f7fe f83b 	bl	8001210 <HAL_GetTick>
 800319a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800319c:	e00c      	b.n	80031b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800319e:	f7fe f837 	bl	8001210 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ac:	d904      	bls.n	80031b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <RTC_EnterInitMode+0x64>
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d1e8      	bne.n	800319e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff89 	bl	8003118 <HAL_RTC_WaitForSynchro>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2204      	movs	r2, #4
 8003210:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800322e:	e005      	b.n	800323c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	3301      	adds	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	3b0a      	subs	r3, #10
 800323a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	2b09      	cmp	r3, #9
 8003240:	d8f6      	bhi.n	8003230 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	b2da      	uxtb	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4313      	orrs	r3, r2
 800324c:	b2db      	uxtb	r3, r3
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	0092      	lsls	r2, r2, #2
 8003272:	4413      	add	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	b2da      	uxtb	r2, r3
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	4413      	add	r3, r2
 8003284:	b2db      	uxtb	r3, r3
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e03f      	b.n	8003324 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fd75 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2224      	movs	r2, #36	; 0x24
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9ca 	bl	8003670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800330a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b20      	cmp	r3, #32
 800334a:	d17c      	bne.n	8003446 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_UART_Transmit+0x2c>
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e075      	b.n	8003448 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_UART_Transmit+0x3e>
 8003366:	2302      	movs	r3, #2
 8003368:	e06e      	b.n	8003448 <HAL_UART_Transmit+0x11c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2221      	movs	r2, #33	; 0x21
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003380:	f7fd ff46 	bl	8001210 <HAL_GetTick>
 8003384:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	d108      	bne.n	80033ae <HAL_UART_Transmit+0x82>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e003      	b.n	80033b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033be:	e02a      	b.n	8003416 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2200      	movs	r2, #0
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8e2 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e036      	b.n	8003448 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3302      	adds	r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e007      	b.n	8003408 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1cf      	bne.n	80033c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	2140      	movs	r1, #64	; 0x40
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f8b2 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e006      	b.n	8003448 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b20      	cmp	r3, #32
 800346e:	f040 808c 	bne.w	800358a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_Receive+0x2e>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e084      	b.n	800358c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_UART_Receive+0x40>
 800348c:	2302      	movs	r3, #2
 800348e:	e07d      	b.n	800358c <HAL_UART_Receive+0x13c>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2222      	movs	r2, #34	; 0x22
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ac:	f7fd feb0 	bl	8001210 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d108      	bne.n	80034da <HAL_UART_Receive+0x8a>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e003      	b.n	80034e2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034ea:	e043      	b.n	8003574 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2200      	movs	r2, #0
 80034f4:	2120      	movs	r1, #32
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f84c 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e042      	b.n	800358c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10c      	bne.n	8003526 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003518:	b29a      	uxth	r2, r3
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3302      	adds	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	e01f      	b.n	8003566 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352e:	d007      	beq.n	8003540 <HAL_UART_Receive+0xf0>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_UART_Receive+0xfe>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e008      	b.n	8003560 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800355a:	b2da      	uxtb	r2, r3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1b6      	bne.n	80034ec <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b090      	sub	sp, #64	; 0x40
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e050      	b.n	8003648 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d04c      	beq.n	8003648 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b4:	f7fd fe2c 	bl	8001210 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d241      	bcs.n	8003648 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035e4:	637a      	str	r2, [r7, #52]	; 0x34
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	613b      	str	r3, [r7, #16]
   return(result);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003618:	623a      	str	r2, [r7, #32]
 800361a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361c:	69f9      	ldr	r1, [r7, #28]
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	e841 2300 	strex	r3, r2, [r1]
 8003624:	61bb      	str	r3, [r7, #24]
   return(result);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e5      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e00f      	b.n	8003668 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	429a      	cmp	r2, r3
 8003664:	d09f      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3740      	adds	r7, #64	; 0x40
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b0c0      	sub	sp, #256	; 0x100
 8003676:	af00      	add	r7, sp, #0
 8003678:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	ea40 0301 	orr.w	r3, r0, r1
 8003698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c8:	f021 010c 	bic.w	r1, r1, #12
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036d6:	430b      	orrs	r3, r1
 80036d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	6999      	ldr	r1, [r3, #24]
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	ea40 0301 	orr.w	r3, r0, r1
 80036f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b8f      	ldr	r3, [pc, #572]	; (800393c <UART_SetConfig+0x2cc>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <UART_SetConfig+0xa0>
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <UART_SetConfig+0x2d0>)
 800370c:	429a      	cmp	r2, r3
 800370e:	d104      	bne.n	800371a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7ff f93c 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003718:	e003      	b.n	8003722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800371a:	f7ff f923 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 800371e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372c:	f040 810c 	bne.w	8003948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800373a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800373e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	1891      	adds	r1, r2, r2
 8003748:	65b9      	str	r1, [r7, #88]	; 0x58
 800374a:	415b      	adcs	r3, r3
 800374c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003752:	4621      	mov	r1, r4
 8003754:	eb12 0801 	adds.w	r8, r2, r1
 8003758:	4629      	mov	r1, r5
 800375a:	eb43 0901 	adc.w	r9, r3, r1
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003772:	4690      	mov	r8, r2
 8003774:	4699      	mov	r9, r3
 8003776:	4623      	mov	r3, r4
 8003778:	eb18 0303 	adds.w	r3, r8, r3
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003780:	462b      	mov	r3, r5
 8003782:	eb49 0303 	adc.w	r3, r9, r3
 8003786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003796:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800379a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800379e:	460b      	mov	r3, r1
 80037a0:	18db      	adds	r3, r3, r3
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
 80037a4:	4613      	mov	r3, r2
 80037a6:	eb42 0303 	adc.w	r3, r2, r3
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
 80037ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037b4:	f7fc fd6c 	bl	8000290 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <UART_SetConfig+0x2d4>)
 80037be:	fba3 2302 	umull	r2, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	011c      	lsls	r4, r3, #4
 80037c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037d8:	4642      	mov	r2, r8
 80037da:	464b      	mov	r3, r9
 80037dc:	1891      	adds	r1, r2, r2
 80037de:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e0:	415b      	adcs	r3, r3
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037e8:	4641      	mov	r1, r8
 80037ea:	eb12 0a01 	adds.w	sl, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0b01 	adc.w	fp, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003808:	4692      	mov	sl, r2
 800380a:	469b      	mov	fp, r3
 800380c:	4643      	mov	r3, r8
 800380e:	eb1a 0303 	adds.w	r3, sl, r3
 8003812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003816:	464b      	mov	r3, r9
 8003818:	eb4b 0303 	adc.w	r3, fp, r3
 800381c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800382c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003834:	460b      	mov	r3, r1
 8003836:	18db      	adds	r3, r3, r3
 8003838:	643b      	str	r3, [r7, #64]	; 0x40
 800383a:	4613      	mov	r3, r2
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
 8003842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800384a:	f7fc fd21 	bl	8000290 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4611      	mov	r1, r2
 8003854:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <UART_SetConfig+0x2d4>)
 8003856:	fba3 2301 	umull	r2, r3, r3, r1
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2264      	movs	r2, #100	; 0x64
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	1acb      	subs	r3, r1, r3
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <UART_SetConfig+0x2d4>)
 800386c:	fba3 2302 	umull	r2, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003878:	441c      	add	r4, r3
 800387a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003884:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	1891      	adds	r1, r2, r2
 8003892:	63b9      	str	r1, [r7, #56]	; 0x38
 8003894:	415b      	adcs	r3, r3
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800389c:	4641      	mov	r1, r8
 800389e:	1851      	adds	r1, r2, r1
 80038a0:	6339      	str	r1, [r7, #48]	; 0x30
 80038a2:	4649      	mov	r1, r9
 80038a4:	414b      	adcs	r3, r1
 80038a6:	637b      	str	r3, [r7, #52]	; 0x34
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038b4:	4659      	mov	r1, fp
 80038b6:	00cb      	lsls	r3, r1, #3
 80038b8:	4651      	mov	r1, sl
 80038ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038be:	4651      	mov	r1, sl
 80038c0:	00ca      	lsls	r2, r1, #3
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	4642      	mov	r2, r8
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d0:	464b      	mov	r3, r9
 80038d2:	460a      	mov	r2, r1
 80038d4:	eb42 0303 	adc.w	r3, r2, r3
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038f0:	460b      	mov	r3, r1
 80038f2:	18db      	adds	r3, r3, r3
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f6:	4613      	mov	r3, r2
 80038f8:	eb42 0303 	adc.w	r3, r2, r3
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003906:	f7fc fcc3 	bl	8000290 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x2d4>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a08      	ldr	r2, [pc, #32]	; (8003944 <UART_SetConfig+0x2d4>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 0207 	and.w	r2, r3, #7
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4422      	add	r2, r4
 8003936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003938:	e105      	b.n	8003b46 <UART_SetConfig+0x4d6>
 800393a:	bf00      	nop
 800393c:	40011000 	.word	0x40011000
 8003940:	40011400 	.word	0x40011400
 8003944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003952:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800395a:	4642      	mov	r2, r8
 800395c:	464b      	mov	r3, r9
 800395e:	1891      	adds	r1, r2, r2
 8003960:	6239      	str	r1, [r7, #32]
 8003962:	415b      	adcs	r3, r3
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800396a:	4641      	mov	r1, r8
 800396c:	1854      	adds	r4, r2, r1
 800396e:	4649      	mov	r1, r9
 8003970:	eb43 0501 	adc.w	r5, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003990:	464b      	mov	r3, r9
 8003992:	eb45 0303 	adc.w	r3, r5, r3
 8003996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039b6:	4629      	mov	r1, r5
 80039b8:	008b      	lsls	r3, r1, #2
 80039ba:	4621      	mov	r1, r4
 80039bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c0:	4621      	mov	r1, r4
 80039c2:	008a      	lsls	r2, r1, #2
 80039c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039c8:	f7fc fc62 	bl	8000290 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b60      	ldr	r3, [pc, #384]	; (8003b54 <UART_SetConfig+0x4e4>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011c      	lsls	r4, r3, #4
 80039da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	1891      	adds	r1, r2, r2
 80039f2:	61b9      	str	r1, [r7, #24]
 80039f4:	415b      	adcs	r3, r3
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fc:	4641      	mov	r1, r8
 80039fe:	1851      	adds	r1, r2, r1
 8003a00:	6139      	str	r1, [r7, #16]
 8003a02:	4649      	mov	r1, r9
 8003a04:	414b      	adcs	r3, r1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a14:	4659      	mov	r1, fp
 8003a16:	00cb      	lsls	r3, r1, #3
 8003a18:	4651      	mov	r1, sl
 8003a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a1e:	4651      	mov	r1, sl
 8003a20:	00ca      	lsls	r2, r1, #3
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a30:	464b      	mov	r3, r9
 8003a32:	460a      	mov	r2, r1
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a54:	4649      	mov	r1, r9
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5e:	4641      	mov	r1, r8
 8003a60:	008a      	lsls	r2, r1, #2
 8003a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a66:	f7fc fc13 	bl	8000290 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	; 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8e:	441c      	add	r4, r3
 8003a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a94:	2200      	movs	r2, #0
 8003a96:	673b      	str	r3, [r7, #112]	; 0x70
 8003a98:	677a      	str	r2, [r7, #116]	; 0x74
 8003a9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aae:	4641      	mov	r1, r8
 8003ab0:	1851      	adds	r1, r2, r1
 8003ab2:	6039      	str	r1, [r7, #0]
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	414b      	adcs	r3, r1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	00cb      	lsls	r3, r1, #3
 8003aca:	4651      	mov	r1, sl
 8003acc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	00ca      	lsls	r2, r1, #3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4642      	mov	r2, r8
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	663b      	str	r3, [r7, #96]	; 0x60
 8003af4:	667a      	str	r2, [r7, #100]	; 0x64
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b02:	4649      	mov	r1, r9
 8003b04:	008b      	lsls	r3, r1, #2
 8003b06:	4641      	mov	r1, r8
 8003b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	008a      	lsls	r2, r1, #2
 8003b10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b14:	f7fc fbbc 	bl	8000290 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2164      	movs	r1, #100	; 0x64
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4422      	add	r2, r4
 8003b44:	609a      	str	r2, [r3, #8]
}
 8003b46:	bf00      	nop
 8003b48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	51eb851f 	.word	0x51eb851f

08003b58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b58:	b084      	sub	sp, #16
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	f107 001c 	add.w	r0, r7, #28
 8003b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d122      	bne.n	8003bb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 faa2 	bl	80040f4 <USB_CoreReset>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e01a      	b.n	8003bec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa96 	bl	80040f4 <USB_CoreReset>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bde:	e005      	b.n	8003bec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10b      	bne.n	8003c0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f043 0206 	orr.w	r2, r3, #6
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c16:	b004      	add	sp, #16
 8003c18:	4770      	bx	lr

08003c1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d115      	bne.n	8003c8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7fd fadc 	bl	8001228 <HAL_Delay>
      ms++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa2e 	bl	80040d8 <USB_GetMode>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d01e      	beq.n	8003cc0 <USB_SetCurrentMode+0x84>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b31      	cmp	r3, #49	; 0x31
 8003c86:	d9f0      	bls.n	8003c6a <USB_SetCurrentMode+0x2e>
 8003c88:	e01a      	b.n	8003cc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d115      	bne.n	8003cbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f7fd fac3 	bl	8001228 <HAL_Delay>
      ms++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa15 	bl	80040d8 <USB_GetMode>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <USB_SetCurrentMode+0x84>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b31      	cmp	r3, #49	; 0x31
 8003cb8:	d9f0      	bls.n	8003c9c <USB_SetCurrentMode+0x60>
 8003cba:	e001      	b.n	8003cc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e005      	b.n	8003ccc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b32      	cmp	r3, #50	; 0x32
 8003cc4:	d101      	bne.n	8003cca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e009      	b.n	8003d08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3340      	adds	r3, #64	; 0x40
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b0e      	cmp	r3, #14
 8003d0c:	d9f2      	bls.n	8003cf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11c      	bne.n	8003d4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d4c:	e00b      	b.n	8003d66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	461a      	mov	r2, r3
 8003d82:	680b      	ldr	r3, [r1, #0]
 8003d84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f965 	bl	8004064 <USB_SetDevSpeed>
 8003d9a:	e008      	b.n	8003dae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f960 	bl	8004064 <USB_SetDevSpeed>
 8003da4:	e003      	b.n	8003dae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003da6:	2103      	movs	r1, #3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f95b 	bl	8004064 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dae:	2110      	movs	r1, #16
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8f3 	bl	8003f9c <USB_FlushTxFifo>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f91f 	bl	8004004 <USB_FlushRxFifo>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	461a      	mov	r2, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e043      	b.n	8003e82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e10:	d118      	bne.n	8003e44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e013      	b.n	8003e56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e008      	b.n	8003e56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	461a      	mov	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3b7      	bcc.n	8003dfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e043      	b.n	8003f18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea6:	d118      	bne.n	8003eda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e013      	b.n	8003eec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e008      	b.n	8003eec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2300      	movs	r3, #0
 8003efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3301      	adds	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3b7      	bcc.n	8003e90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f043 0210 	orr.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <USB_DevInit+0x2c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d107      	bne.n	8003f88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f94:	b004      	add	sp, #16
 8003f96:	4770      	bx	lr
 8003f98:	803c3800 	.word	0x803c3800

08003f9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3301      	adds	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <USB_FlushTxFifo+0x64>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e01b      	b.n	8003ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	daf2      	bge.n	8003faa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	019b      	lsls	r3, r3, #6
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a08      	ldr	r2, [pc, #32]	; (8004000 <USB_FlushTxFifo+0x64>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e006      	b.n	8003ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d0f0      	beq.n	8003fd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	00030d40 	.word	0x00030d40

08004004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a11      	ldr	r2, [pc, #68]	; (8004060 <USB_FlushRxFifo+0x5c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e018      	b.n	8004054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	daf2      	bge.n	8004010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2210      	movs	r2, #16
 8004032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <USB_FlushRxFifo+0x5c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e006      	b.n	8004054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d0f0      	beq.n	8004034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	00030d40 	.word	0x00030d40

08004064 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0301 	and.w	r3, r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <USB_CoreReset+0x64>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e01b      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	daf2      	bge.n	8004100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <USB_CoreReset+0x64>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d0f0      	beq.n	800412a <USB_CoreReset+0x36>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	00030d40 	.word	0x00030d40

0800415c <atoi>:
 800415c:	220a      	movs	r2, #10
 800415e:	2100      	movs	r1, #0
 8004160:	f000 b938 	b.w	80043d4 <strtol>

08004164 <__errno>:
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <__errno+0x8>)
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c

08004170 <__libc_init_array>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	4d0d      	ldr	r5, [pc, #52]	; (80041a8 <__libc_init_array+0x38>)
 8004174:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <__libc_init_array+0x3c>)
 8004176:	1b64      	subs	r4, r4, r5
 8004178:	10a4      	asrs	r4, r4, #2
 800417a:	2600      	movs	r6, #0
 800417c:	42a6      	cmp	r6, r4
 800417e:	d109      	bne.n	8004194 <__libc_init_array+0x24>
 8004180:	4d0b      	ldr	r5, [pc, #44]	; (80041b0 <__libc_init_array+0x40>)
 8004182:	4c0c      	ldr	r4, [pc, #48]	; (80041b4 <__libc_init_array+0x44>)
 8004184:	f001 fae6 	bl	8005754 <_init>
 8004188:	1b64      	subs	r4, r4, r5
 800418a:	10a4      	asrs	r4, r4, #2
 800418c:	2600      	movs	r6, #0
 800418e:	42a6      	cmp	r6, r4
 8004190:	d105      	bne.n	800419e <__libc_init_array+0x2e>
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	f855 3b04 	ldr.w	r3, [r5], #4
 8004198:	4798      	blx	r3
 800419a:	3601      	adds	r6, #1
 800419c:	e7ee      	b.n	800417c <__libc_init_array+0xc>
 800419e:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a2:	4798      	blx	r3
 80041a4:	3601      	adds	r6, #1
 80041a6:	e7f2      	b.n	800418e <__libc_init_array+0x1e>
 80041a8:	080059fc 	.word	0x080059fc
 80041ac:	080059fc 	.word	0x080059fc
 80041b0:	080059fc 	.word	0x080059fc
 80041b4:	08005a00 	.word	0x08005a00

080041b8 <memset>:
 80041b8:	4402      	add	r2, r0
 80041ba:	4603      	mov	r3, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <siprintf>:
 80041c8:	b40e      	push	{r1, r2, r3}
 80041ca:	b500      	push	{lr}
 80041cc:	b09c      	sub	sp, #112	; 0x70
 80041ce:	ab1d      	add	r3, sp, #116	; 0x74
 80041d0:	9002      	str	r0, [sp, #8]
 80041d2:	9006      	str	r0, [sp, #24]
 80041d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041d8:	4809      	ldr	r0, [pc, #36]	; (8004200 <siprintf+0x38>)
 80041da:	9107      	str	r1, [sp, #28]
 80041dc:	9104      	str	r1, [sp, #16]
 80041de:	4909      	ldr	r1, [pc, #36]	; (8004204 <siprintf+0x3c>)
 80041e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041e4:	9105      	str	r1, [sp, #20]
 80041e6:	6800      	ldr	r0, [r0, #0]
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	a902      	add	r1, sp, #8
 80041ec:	f000 fa70 	bl	80046d0 <_svfiprintf_r>
 80041f0:	9b02      	ldr	r3, [sp, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	b01c      	add	sp, #112	; 0x70
 80041f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041fc:	b003      	add	sp, #12
 80041fe:	4770      	bx	lr
 8004200:	2000000c 	.word	0x2000000c
 8004204:	ffff0208 	.word	0xffff0208

08004208 <strcpy>:
 8004208:	4603      	mov	r3, r0
 800420a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800420e:	f803 2b01 	strb.w	r2, [r3], #1
 8004212:	2a00      	cmp	r2, #0
 8004214:	d1f9      	bne.n	800420a <strcpy+0x2>
 8004216:	4770      	bx	lr

08004218 <strtok>:
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <strtok+0x5c>)
 800421a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800421c:	681e      	ldr	r6, [r3, #0]
 800421e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004220:	4605      	mov	r5, r0
 8004222:	b9fc      	cbnz	r4, 8004264 <strtok+0x4c>
 8004224:	2050      	movs	r0, #80	; 0x50
 8004226:	9101      	str	r1, [sp, #4]
 8004228:	f000 f90e 	bl	8004448 <malloc>
 800422c:	9901      	ldr	r1, [sp, #4]
 800422e:	65b0      	str	r0, [r6, #88]	; 0x58
 8004230:	4602      	mov	r2, r0
 8004232:	b920      	cbnz	r0, 800423e <strtok+0x26>
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <strtok+0x60>)
 8004236:	4811      	ldr	r0, [pc, #68]	; (800427c <strtok+0x64>)
 8004238:	2157      	movs	r1, #87	; 0x57
 800423a:	f000 f8d5 	bl	80043e8 <__assert_func>
 800423e:	e9c0 4400 	strd	r4, r4, [r0]
 8004242:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004246:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800424a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800424e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004252:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004256:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800425a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800425e:	6184      	str	r4, [r0, #24]
 8004260:	7704      	strb	r4, [r0, #28]
 8004262:	6244      	str	r4, [r0, #36]	; 0x24
 8004264:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004266:	2301      	movs	r3, #1
 8004268:	4628      	mov	r0, r5
 800426a:	b002      	add	sp, #8
 800426c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004270:	f000 b806 	b.w	8004280 <__strtok_r>
 8004274:	2000000c 	.word	0x2000000c
 8004278:	080057b0 	.word	0x080057b0
 800427c:	080057c7 	.word	0x080057c7

08004280 <__strtok_r>:
 8004280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004282:	b908      	cbnz	r0, 8004288 <__strtok_r+0x8>
 8004284:	6810      	ldr	r0, [r2, #0]
 8004286:	b188      	cbz	r0, 80042ac <__strtok_r+0x2c>
 8004288:	4604      	mov	r4, r0
 800428a:	4620      	mov	r0, r4
 800428c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004290:	460f      	mov	r7, r1
 8004292:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004296:	b91e      	cbnz	r6, 80042a0 <__strtok_r+0x20>
 8004298:	b965      	cbnz	r5, 80042b4 <__strtok_r+0x34>
 800429a:	6015      	str	r5, [r2, #0]
 800429c:	4628      	mov	r0, r5
 800429e:	e005      	b.n	80042ac <__strtok_r+0x2c>
 80042a0:	42b5      	cmp	r5, r6
 80042a2:	d1f6      	bne.n	8004292 <__strtok_r+0x12>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <__strtok_r+0xa>
 80042a8:	6014      	str	r4, [r2, #0]
 80042aa:	7003      	strb	r3, [r0, #0]
 80042ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ae:	461c      	mov	r4, r3
 80042b0:	e00c      	b.n	80042cc <__strtok_r+0x4c>
 80042b2:	b915      	cbnz	r5, 80042ba <__strtok_r+0x3a>
 80042b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80042b8:	460e      	mov	r6, r1
 80042ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80042be:	42ab      	cmp	r3, r5
 80042c0:	d1f7      	bne.n	80042b2 <__strtok_r+0x32>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f3      	beq.n	80042ae <__strtok_r+0x2e>
 80042c6:	2300      	movs	r3, #0
 80042c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80042cc:	6014      	str	r4, [r2, #0]
 80042ce:	e7ed      	b.n	80042ac <__strtok_r+0x2c>

080042d0 <_strtol_l.constprop.0>:
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d6:	d001      	beq.n	80042dc <_strtol_l.constprop.0+0xc>
 80042d8:	2b24      	cmp	r3, #36	; 0x24
 80042da:	d906      	bls.n	80042ea <_strtol_l.constprop.0+0x1a>
 80042dc:	f7ff ff42 	bl	8004164 <__errno>
 80042e0:	2316      	movs	r3, #22
 80042e2:	6003      	str	r3, [r0, #0]
 80042e4:	2000      	movs	r0, #0
 80042e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80043d0 <_strtol_l.constprop.0+0x100>
 80042ee:	460d      	mov	r5, r1
 80042f0:	462e      	mov	r6, r5
 80042f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80042fa:	f017 0708 	ands.w	r7, r7, #8
 80042fe:	d1f7      	bne.n	80042f0 <_strtol_l.constprop.0+0x20>
 8004300:	2c2d      	cmp	r4, #45	; 0x2d
 8004302:	d132      	bne.n	800436a <_strtol_l.constprop.0+0x9a>
 8004304:	782c      	ldrb	r4, [r5, #0]
 8004306:	2701      	movs	r7, #1
 8004308:	1cb5      	adds	r5, r6, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d05b      	beq.n	80043c6 <_strtol_l.constprop.0+0xf6>
 800430e:	2b10      	cmp	r3, #16
 8004310:	d109      	bne.n	8004326 <_strtol_l.constprop.0+0x56>
 8004312:	2c30      	cmp	r4, #48	; 0x30
 8004314:	d107      	bne.n	8004326 <_strtol_l.constprop.0+0x56>
 8004316:	782c      	ldrb	r4, [r5, #0]
 8004318:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800431c:	2c58      	cmp	r4, #88	; 0x58
 800431e:	d14d      	bne.n	80043bc <_strtol_l.constprop.0+0xec>
 8004320:	786c      	ldrb	r4, [r5, #1]
 8004322:	2310      	movs	r3, #16
 8004324:	3502      	adds	r5, #2
 8004326:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800432a:	f108 38ff 	add.w	r8, r8, #4294967295
 800432e:	f04f 0c00 	mov.w	ip, #0
 8004332:	fbb8 f9f3 	udiv	r9, r8, r3
 8004336:	4666      	mov	r6, ip
 8004338:	fb03 8a19 	mls	sl, r3, r9, r8
 800433c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004340:	f1be 0f09 	cmp.w	lr, #9
 8004344:	d816      	bhi.n	8004374 <_strtol_l.constprop.0+0xa4>
 8004346:	4674      	mov	r4, lr
 8004348:	42a3      	cmp	r3, r4
 800434a:	dd24      	ble.n	8004396 <_strtol_l.constprop.0+0xc6>
 800434c:	f1bc 0f00 	cmp.w	ip, #0
 8004350:	db1e      	blt.n	8004390 <_strtol_l.constprop.0+0xc0>
 8004352:	45b1      	cmp	r9, r6
 8004354:	d31c      	bcc.n	8004390 <_strtol_l.constprop.0+0xc0>
 8004356:	d101      	bne.n	800435c <_strtol_l.constprop.0+0x8c>
 8004358:	45a2      	cmp	sl, r4
 800435a:	db19      	blt.n	8004390 <_strtol_l.constprop.0+0xc0>
 800435c:	fb06 4603 	mla	r6, r6, r3, r4
 8004360:	f04f 0c01 	mov.w	ip, #1
 8004364:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004368:	e7e8      	b.n	800433c <_strtol_l.constprop.0+0x6c>
 800436a:	2c2b      	cmp	r4, #43	; 0x2b
 800436c:	bf04      	itt	eq
 800436e:	782c      	ldrbeq	r4, [r5, #0]
 8004370:	1cb5      	addeq	r5, r6, #2
 8004372:	e7ca      	b.n	800430a <_strtol_l.constprop.0+0x3a>
 8004374:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004378:	f1be 0f19 	cmp.w	lr, #25
 800437c:	d801      	bhi.n	8004382 <_strtol_l.constprop.0+0xb2>
 800437e:	3c37      	subs	r4, #55	; 0x37
 8004380:	e7e2      	b.n	8004348 <_strtol_l.constprop.0+0x78>
 8004382:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004386:	f1be 0f19 	cmp.w	lr, #25
 800438a:	d804      	bhi.n	8004396 <_strtol_l.constprop.0+0xc6>
 800438c:	3c57      	subs	r4, #87	; 0x57
 800438e:	e7db      	b.n	8004348 <_strtol_l.constprop.0+0x78>
 8004390:	f04f 3cff 	mov.w	ip, #4294967295
 8004394:	e7e6      	b.n	8004364 <_strtol_l.constprop.0+0x94>
 8004396:	f1bc 0f00 	cmp.w	ip, #0
 800439a:	da05      	bge.n	80043a8 <_strtol_l.constprop.0+0xd8>
 800439c:	2322      	movs	r3, #34	; 0x22
 800439e:	6003      	str	r3, [r0, #0]
 80043a0:	4646      	mov	r6, r8
 80043a2:	b942      	cbnz	r2, 80043b6 <_strtol_l.constprop.0+0xe6>
 80043a4:	4630      	mov	r0, r6
 80043a6:	e79e      	b.n	80042e6 <_strtol_l.constprop.0+0x16>
 80043a8:	b107      	cbz	r7, 80043ac <_strtol_l.constprop.0+0xdc>
 80043aa:	4276      	negs	r6, r6
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	d0f9      	beq.n	80043a4 <_strtol_l.constprop.0+0xd4>
 80043b0:	f1bc 0f00 	cmp.w	ip, #0
 80043b4:	d000      	beq.n	80043b8 <_strtol_l.constprop.0+0xe8>
 80043b6:	1e69      	subs	r1, r5, #1
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	e7f3      	b.n	80043a4 <_strtol_l.constprop.0+0xd4>
 80043bc:	2430      	movs	r4, #48	; 0x30
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1b1      	bne.n	8004326 <_strtol_l.constprop.0+0x56>
 80043c2:	2308      	movs	r3, #8
 80043c4:	e7af      	b.n	8004326 <_strtol_l.constprop.0+0x56>
 80043c6:	2c30      	cmp	r4, #48	; 0x30
 80043c8:	d0a5      	beq.n	8004316 <_strtol_l.constprop.0+0x46>
 80043ca:	230a      	movs	r3, #10
 80043cc:	e7ab      	b.n	8004326 <_strtol_l.constprop.0+0x56>
 80043ce:	bf00      	nop
 80043d0:	08005861 	.word	0x08005861

080043d4 <strtol>:
 80043d4:	4613      	mov	r3, r2
 80043d6:	460a      	mov	r2, r1
 80043d8:	4601      	mov	r1, r0
 80043da:	4802      	ldr	r0, [pc, #8]	; (80043e4 <strtol+0x10>)
 80043dc:	6800      	ldr	r0, [r0, #0]
 80043de:	f7ff bf77 	b.w	80042d0 <_strtol_l.constprop.0>
 80043e2:	bf00      	nop
 80043e4:	2000000c 	.word	0x2000000c

080043e8 <__assert_func>:
 80043e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043ea:	4614      	mov	r4, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <__assert_func+0x2c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4605      	mov	r5, r0
 80043f4:	68d8      	ldr	r0, [r3, #12]
 80043f6:	b14c      	cbz	r4, 800440c <__assert_func+0x24>
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <__assert_func+0x30>)
 80043fa:	9100      	str	r1, [sp, #0]
 80043fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004400:	4906      	ldr	r1, [pc, #24]	; (800441c <__assert_func+0x34>)
 8004402:	462b      	mov	r3, r5
 8004404:	f000 f80e 	bl	8004424 <fiprintf>
 8004408:	f000 fe20 	bl	800504c <abort>
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <__assert_func+0x38>)
 800440e:	461c      	mov	r4, r3
 8004410:	e7f3      	b.n	80043fa <__assert_func+0x12>
 8004412:	bf00      	nop
 8004414:	2000000c 	.word	0x2000000c
 8004418:	08005824 	.word	0x08005824
 800441c:	08005831 	.word	0x08005831
 8004420:	0800585f 	.word	0x0800585f

08004424 <fiprintf>:
 8004424:	b40e      	push	{r1, r2, r3}
 8004426:	b503      	push	{r0, r1, lr}
 8004428:	4601      	mov	r1, r0
 800442a:	ab03      	add	r3, sp, #12
 800442c:	4805      	ldr	r0, [pc, #20]	; (8004444 <fiprintf+0x20>)
 800442e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004432:	6800      	ldr	r0, [r0, #0]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	f000 fa75 	bl	8004924 <_vfiprintf_r>
 800443a:	b002      	add	sp, #8
 800443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004440:	b003      	add	sp, #12
 8004442:	4770      	bx	lr
 8004444:	2000000c 	.word	0x2000000c

08004448 <malloc>:
 8004448:	4b02      	ldr	r3, [pc, #8]	; (8004454 <malloc+0xc>)
 800444a:	4601      	mov	r1, r0
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f000 b86f 	b.w	8004530 <_malloc_r>
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c

08004458 <_free_r>:
 8004458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800445a:	2900      	cmp	r1, #0
 800445c:	d044      	beq.n	80044e8 <_free_r+0x90>
 800445e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004462:	9001      	str	r0, [sp, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f1a1 0404 	sub.w	r4, r1, #4
 800446a:	bfb8      	it	lt
 800446c:	18e4      	addlt	r4, r4, r3
 800446e:	f001 f83d 	bl	80054ec <__malloc_lock>
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <_free_r+0x94>)
 8004474:	9801      	ldr	r0, [sp, #4]
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	b933      	cbnz	r3, 8004488 <_free_r+0x30>
 800447a:	6063      	str	r3, [r4, #4]
 800447c:	6014      	str	r4, [r2, #0]
 800447e:	b003      	add	sp, #12
 8004480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004484:	f001 b838 	b.w	80054f8 <__malloc_unlock>
 8004488:	42a3      	cmp	r3, r4
 800448a:	d908      	bls.n	800449e <_free_r+0x46>
 800448c:	6825      	ldr	r5, [r4, #0]
 800448e:	1961      	adds	r1, r4, r5
 8004490:	428b      	cmp	r3, r1
 8004492:	bf01      	itttt	eq
 8004494:	6819      	ldreq	r1, [r3, #0]
 8004496:	685b      	ldreq	r3, [r3, #4]
 8004498:	1949      	addeq	r1, r1, r5
 800449a:	6021      	streq	r1, [r4, #0]
 800449c:	e7ed      	b.n	800447a <_free_r+0x22>
 800449e:	461a      	mov	r2, r3
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	b10b      	cbz	r3, 80044a8 <_free_r+0x50>
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	d9fa      	bls.n	800449e <_free_r+0x46>
 80044a8:	6811      	ldr	r1, [r2, #0]
 80044aa:	1855      	adds	r5, r2, r1
 80044ac:	42a5      	cmp	r5, r4
 80044ae:	d10b      	bne.n	80044c8 <_free_r+0x70>
 80044b0:	6824      	ldr	r4, [r4, #0]
 80044b2:	4421      	add	r1, r4
 80044b4:	1854      	adds	r4, r2, r1
 80044b6:	42a3      	cmp	r3, r4
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	d1e0      	bne.n	800447e <_free_r+0x26>
 80044bc:	681c      	ldr	r4, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	6053      	str	r3, [r2, #4]
 80044c2:	4421      	add	r1, r4
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	e7da      	b.n	800447e <_free_r+0x26>
 80044c8:	d902      	bls.n	80044d0 <_free_r+0x78>
 80044ca:	230c      	movs	r3, #12
 80044cc:	6003      	str	r3, [r0, #0]
 80044ce:	e7d6      	b.n	800447e <_free_r+0x26>
 80044d0:	6825      	ldr	r5, [r4, #0]
 80044d2:	1961      	adds	r1, r4, r5
 80044d4:	428b      	cmp	r3, r1
 80044d6:	bf04      	itt	eq
 80044d8:	6819      	ldreq	r1, [r3, #0]
 80044da:	685b      	ldreq	r3, [r3, #4]
 80044dc:	6063      	str	r3, [r4, #4]
 80044de:	bf04      	itt	eq
 80044e0:	1949      	addeq	r1, r1, r5
 80044e2:	6021      	streq	r1, [r4, #0]
 80044e4:	6054      	str	r4, [r2, #4]
 80044e6:	e7ca      	b.n	800447e <_free_r+0x26>
 80044e8:	b003      	add	sp, #12
 80044ea:	bd30      	pop	{r4, r5, pc}
 80044ec:	20000848 	.word	0x20000848

080044f0 <sbrk_aligned>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4e0e      	ldr	r6, [pc, #56]	; (800452c <sbrk_aligned+0x3c>)
 80044f4:	460c      	mov	r4, r1
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	4605      	mov	r5, r0
 80044fa:	b911      	cbnz	r1, 8004502 <sbrk_aligned+0x12>
 80044fc:	f000 fcd6 	bl	8004eac <_sbrk_r>
 8004500:	6030      	str	r0, [r6, #0]
 8004502:	4621      	mov	r1, r4
 8004504:	4628      	mov	r0, r5
 8004506:	f000 fcd1 	bl	8004eac <_sbrk_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	d00a      	beq.n	8004524 <sbrk_aligned+0x34>
 800450e:	1cc4      	adds	r4, r0, #3
 8004510:	f024 0403 	bic.w	r4, r4, #3
 8004514:	42a0      	cmp	r0, r4
 8004516:	d007      	beq.n	8004528 <sbrk_aligned+0x38>
 8004518:	1a21      	subs	r1, r4, r0
 800451a:	4628      	mov	r0, r5
 800451c:	f000 fcc6 	bl	8004eac <_sbrk_r>
 8004520:	3001      	adds	r0, #1
 8004522:	d101      	bne.n	8004528 <sbrk_aligned+0x38>
 8004524:	f04f 34ff 	mov.w	r4, #4294967295
 8004528:	4620      	mov	r0, r4
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	2000084c 	.word	0x2000084c

08004530 <_malloc_r>:
 8004530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004534:	1ccd      	adds	r5, r1, #3
 8004536:	f025 0503 	bic.w	r5, r5, #3
 800453a:	3508      	adds	r5, #8
 800453c:	2d0c      	cmp	r5, #12
 800453e:	bf38      	it	cc
 8004540:	250c      	movcc	r5, #12
 8004542:	2d00      	cmp	r5, #0
 8004544:	4607      	mov	r7, r0
 8004546:	db01      	blt.n	800454c <_malloc_r+0x1c>
 8004548:	42a9      	cmp	r1, r5
 800454a:	d905      	bls.n	8004558 <_malloc_r+0x28>
 800454c:	230c      	movs	r3, #12
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	2600      	movs	r6, #0
 8004552:	4630      	mov	r0, r6
 8004554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004558:	4e2e      	ldr	r6, [pc, #184]	; (8004614 <_malloc_r+0xe4>)
 800455a:	f000 ffc7 	bl	80054ec <__malloc_lock>
 800455e:	6833      	ldr	r3, [r6, #0]
 8004560:	461c      	mov	r4, r3
 8004562:	bb34      	cbnz	r4, 80045b2 <_malloc_r+0x82>
 8004564:	4629      	mov	r1, r5
 8004566:	4638      	mov	r0, r7
 8004568:	f7ff ffc2 	bl	80044f0 <sbrk_aligned>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	4604      	mov	r4, r0
 8004570:	d14d      	bne.n	800460e <_malloc_r+0xde>
 8004572:	6834      	ldr	r4, [r6, #0]
 8004574:	4626      	mov	r6, r4
 8004576:	2e00      	cmp	r6, #0
 8004578:	d140      	bne.n	80045fc <_malloc_r+0xcc>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	4631      	mov	r1, r6
 800457e:	4638      	mov	r0, r7
 8004580:	eb04 0803 	add.w	r8, r4, r3
 8004584:	f000 fc92 	bl	8004eac <_sbrk_r>
 8004588:	4580      	cmp	r8, r0
 800458a:	d13a      	bne.n	8004602 <_malloc_r+0xd2>
 800458c:	6821      	ldr	r1, [r4, #0]
 800458e:	3503      	adds	r5, #3
 8004590:	1a6d      	subs	r5, r5, r1
 8004592:	f025 0503 	bic.w	r5, r5, #3
 8004596:	3508      	adds	r5, #8
 8004598:	2d0c      	cmp	r5, #12
 800459a:	bf38      	it	cc
 800459c:	250c      	movcc	r5, #12
 800459e:	4629      	mov	r1, r5
 80045a0:	4638      	mov	r0, r7
 80045a2:	f7ff ffa5 	bl	80044f0 <sbrk_aligned>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d02b      	beq.n	8004602 <_malloc_r+0xd2>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	442b      	add	r3, r5
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	e00e      	b.n	80045d0 <_malloc_r+0xa0>
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	1b52      	subs	r2, r2, r5
 80045b6:	d41e      	bmi.n	80045f6 <_malloc_r+0xc6>
 80045b8:	2a0b      	cmp	r2, #11
 80045ba:	d916      	bls.n	80045ea <_malloc_r+0xba>
 80045bc:	1961      	adds	r1, r4, r5
 80045be:	42a3      	cmp	r3, r4
 80045c0:	6025      	str	r5, [r4, #0]
 80045c2:	bf18      	it	ne
 80045c4:	6059      	strne	r1, [r3, #4]
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	bf08      	it	eq
 80045ca:	6031      	streq	r1, [r6, #0]
 80045cc:	5162      	str	r2, [r4, r5]
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	4638      	mov	r0, r7
 80045d2:	f104 060b 	add.w	r6, r4, #11
 80045d6:	f000 ff8f 	bl	80054f8 <__malloc_unlock>
 80045da:	f026 0607 	bic.w	r6, r6, #7
 80045de:	1d23      	adds	r3, r4, #4
 80045e0:	1af2      	subs	r2, r6, r3
 80045e2:	d0b6      	beq.n	8004552 <_malloc_r+0x22>
 80045e4:	1b9b      	subs	r3, r3, r6
 80045e6:	50a3      	str	r3, [r4, r2]
 80045e8:	e7b3      	b.n	8004552 <_malloc_r+0x22>
 80045ea:	6862      	ldr	r2, [r4, #4]
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	bf0c      	ite	eq
 80045f0:	6032      	streq	r2, [r6, #0]
 80045f2:	605a      	strne	r2, [r3, #4]
 80045f4:	e7ec      	b.n	80045d0 <_malloc_r+0xa0>
 80045f6:	4623      	mov	r3, r4
 80045f8:	6864      	ldr	r4, [r4, #4]
 80045fa:	e7b2      	b.n	8004562 <_malloc_r+0x32>
 80045fc:	4634      	mov	r4, r6
 80045fe:	6876      	ldr	r6, [r6, #4]
 8004600:	e7b9      	b.n	8004576 <_malloc_r+0x46>
 8004602:	230c      	movs	r3, #12
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4638      	mov	r0, r7
 8004608:	f000 ff76 	bl	80054f8 <__malloc_unlock>
 800460c:	e7a1      	b.n	8004552 <_malloc_r+0x22>
 800460e:	6025      	str	r5, [r4, #0]
 8004610:	e7de      	b.n	80045d0 <_malloc_r+0xa0>
 8004612:	bf00      	nop
 8004614:	20000848 	.word	0x20000848

08004618 <__ssputs_r>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	688e      	ldr	r6, [r1, #8]
 800461e:	429e      	cmp	r6, r3
 8004620:	4682      	mov	sl, r0
 8004622:	460c      	mov	r4, r1
 8004624:	4690      	mov	r8, r2
 8004626:	461f      	mov	r7, r3
 8004628:	d838      	bhi.n	800469c <__ssputs_r+0x84>
 800462a:	898a      	ldrh	r2, [r1, #12]
 800462c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004630:	d032      	beq.n	8004698 <__ssputs_r+0x80>
 8004632:	6825      	ldr	r5, [r4, #0]
 8004634:	6909      	ldr	r1, [r1, #16]
 8004636:	eba5 0901 	sub.w	r9, r5, r1
 800463a:	6965      	ldr	r5, [r4, #20]
 800463c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004644:	3301      	adds	r3, #1
 8004646:	444b      	add	r3, r9
 8004648:	106d      	asrs	r5, r5, #1
 800464a:	429d      	cmp	r5, r3
 800464c:	bf38      	it	cc
 800464e:	461d      	movcc	r5, r3
 8004650:	0553      	lsls	r3, r2, #21
 8004652:	d531      	bpl.n	80046b8 <__ssputs_r+0xa0>
 8004654:	4629      	mov	r1, r5
 8004656:	f7ff ff6b 	bl	8004530 <_malloc_r>
 800465a:	4606      	mov	r6, r0
 800465c:	b950      	cbnz	r0, 8004674 <__ssputs_r+0x5c>
 800465e:	230c      	movs	r3, #12
 8004660:	f8ca 3000 	str.w	r3, [sl]
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004674:	6921      	ldr	r1, [r4, #16]
 8004676:	464a      	mov	r2, r9
 8004678:	f000 ff10 	bl	800549c <memcpy>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	81a3      	strh	r3, [r4, #12]
 8004688:	6126      	str	r6, [r4, #16]
 800468a:	6165      	str	r5, [r4, #20]
 800468c:	444e      	add	r6, r9
 800468e:	eba5 0509 	sub.w	r5, r5, r9
 8004692:	6026      	str	r6, [r4, #0]
 8004694:	60a5      	str	r5, [r4, #8]
 8004696:	463e      	mov	r6, r7
 8004698:	42be      	cmp	r6, r7
 800469a:	d900      	bls.n	800469e <__ssputs_r+0x86>
 800469c:	463e      	mov	r6, r7
 800469e:	6820      	ldr	r0, [r4, #0]
 80046a0:	4632      	mov	r2, r6
 80046a2:	4641      	mov	r1, r8
 80046a4:	f000 ff08 	bl	80054b8 <memmove>
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	1b9b      	subs	r3, r3, r6
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	4433      	add	r3, r6
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	2000      	movs	r0, #0
 80046b6:	e7db      	b.n	8004670 <__ssputs_r+0x58>
 80046b8:	462a      	mov	r2, r5
 80046ba:	f000 ff23 	bl	8005504 <_realloc_r>
 80046be:	4606      	mov	r6, r0
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d1e1      	bne.n	8004688 <__ssputs_r+0x70>
 80046c4:	6921      	ldr	r1, [r4, #16]
 80046c6:	4650      	mov	r0, sl
 80046c8:	f7ff fec6 	bl	8004458 <_free_r>
 80046cc:	e7c7      	b.n	800465e <__ssputs_r+0x46>
	...

080046d0 <_svfiprintf_r>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	4698      	mov	r8, r3
 80046d6:	898b      	ldrh	r3, [r1, #12]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	b09d      	sub	sp, #116	; 0x74
 80046dc:	4607      	mov	r7, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	d50e      	bpl.n	8004702 <_svfiprintf_r+0x32>
 80046e4:	690b      	ldr	r3, [r1, #16]
 80046e6:	b963      	cbnz	r3, 8004702 <_svfiprintf_r+0x32>
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	f7ff ff21 	bl	8004530 <_malloc_r>
 80046ee:	6028      	str	r0, [r5, #0]
 80046f0:	6128      	str	r0, [r5, #16]
 80046f2:	b920      	cbnz	r0, 80046fe <_svfiprintf_r+0x2e>
 80046f4:	230c      	movs	r3, #12
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	e0d1      	b.n	80048a2 <_svfiprintf_r+0x1d2>
 80046fe:	2340      	movs	r3, #64	; 0x40
 8004700:	616b      	str	r3, [r5, #20]
 8004702:	2300      	movs	r3, #0
 8004704:	9309      	str	r3, [sp, #36]	; 0x24
 8004706:	2320      	movs	r3, #32
 8004708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800470c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004710:	2330      	movs	r3, #48	; 0x30
 8004712:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048bc <_svfiprintf_r+0x1ec>
 8004716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800471a:	f04f 0901 	mov.w	r9, #1
 800471e:	4623      	mov	r3, r4
 8004720:	469a      	mov	sl, r3
 8004722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004726:	b10a      	cbz	r2, 800472c <_svfiprintf_r+0x5c>
 8004728:	2a25      	cmp	r2, #37	; 0x25
 800472a:	d1f9      	bne.n	8004720 <_svfiprintf_r+0x50>
 800472c:	ebba 0b04 	subs.w	fp, sl, r4
 8004730:	d00b      	beq.n	800474a <_svfiprintf_r+0x7a>
 8004732:	465b      	mov	r3, fp
 8004734:	4622      	mov	r2, r4
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ff6d 	bl	8004618 <__ssputs_r>
 800473e:	3001      	adds	r0, #1
 8004740:	f000 80aa 	beq.w	8004898 <_svfiprintf_r+0x1c8>
 8004744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004746:	445a      	add	r2, fp
 8004748:	9209      	str	r2, [sp, #36]	; 0x24
 800474a:	f89a 3000 	ldrb.w	r3, [sl]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80a2 	beq.w	8004898 <_svfiprintf_r+0x1c8>
 8004754:	2300      	movs	r3, #0
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475e:	f10a 0a01 	add.w	sl, sl, #1
 8004762:	9304      	str	r3, [sp, #16]
 8004764:	9307      	str	r3, [sp, #28]
 8004766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800476a:	931a      	str	r3, [sp, #104]	; 0x68
 800476c:	4654      	mov	r4, sl
 800476e:	2205      	movs	r2, #5
 8004770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004774:	4851      	ldr	r0, [pc, #324]	; (80048bc <_svfiprintf_r+0x1ec>)
 8004776:	f7fb fd3b 	bl	80001f0 <memchr>
 800477a:	9a04      	ldr	r2, [sp, #16]
 800477c:	b9d8      	cbnz	r0, 80047b6 <_svfiprintf_r+0xe6>
 800477e:	06d0      	lsls	r0, r2, #27
 8004780:	bf44      	itt	mi
 8004782:	2320      	movmi	r3, #32
 8004784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004788:	0711      	lsls	r1, r2, #28
 800478a:	bf44      	itt	mi
 800478c:	232b      	movmi	r3, #43	; 0x2b
 800478e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004792:	f89a 3000 	ldrb.w	r3, [sl]
 8004796:	2b2a      	cmp	r3, #42	; 0x2a
 8004798:	d015      	beq.n	80047c6 <_svfiprintf_r+0xf6>
 800479a:	9a07      	ldr	r2, [sp, #28]
 800479c:	4654      	mov	r4, sl
 800479e:	2000      	movs	r0, #0
 80047a0:	f04f 0c0a 	mov.w	ip, #10
 80047a4:	4621      	mov	r1, r4
 80047a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047aa:	3b30      	subs	r3, #48	; 0x30
 80047ac:	2b09      	cmp	r3, #9
 80047ae:	d94e      	bls.n	800484e <_svfiprintf_r+0x17e>
 80047b0:	b1b0      	cbz	r0, 80047e0 <_svfiprintf_r+0x110>
 80047b2:	9207      	str	r2, [sp, #28]
 80047b4:	e014      	b.n	80047e0 <_svfiprintf_r+0x110>
 80047b6:	eba0 0308 	sub.w	r3, r0, r8
 80047ba:	fa09 f303 	lsl.w	r3, r9, r3
 80047be:	4313      	orrs	r3, r2
 80047c0:	9304      	str	r3, [sp, #16]
 80047c2:	46a2      	mov	sl, r4
 80047c4:	e7d2      	b.n	800476c <_svfiprintf_r+0x9c>
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	9103      	str	r1, [sp, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfbb      	ittet	lt
 80047d2:	425b      	neglt	r3, r3
 80047d4:	f042 0202 	orrlt.w	r2, r2, #2
 80047d8:	9307      	strge	r3, [sp, #28]
 80047da:	9307      	strlt	r3, [sp, #28]
 80047dc:	bfb8      	it	lt
 80047de:	9204      	strlt	r2, [sp, #16]
 80047e0:	7823      	ldrb	r3, [r4, #0]
 80047e2:	2b2e      	cmp	r3, #46	; 0x2e
 80047e4:	d10c      	bne.n	8004800 <_svfiprintf_r+0x130>
 80047e6:	7863      	ldrb	r3, [r4, #1]
 80047e8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ea:	d135      	bne.n	8004858 <_svfiprintf_r+0x188>
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfb8      	it	lt
 80047f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047fc:	3402      	adds	r4, #2
 80047fe:	9305      	str	r3, [sp, #20]
 8004800:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048cc <_svfiprintf_r+0x1fc>
 8004804:	7821      	ldrb	r1, [r4, #0]
 8004806:	2203      	movs	r2, #3
 8004808:	4650      	mov	r0, sl
 800480a:	f7fb fcf1 	bl	80001f0 <memchr>
 800480e:	b140      	cbz	r0, 8004822 <_svfiprintf_r+0x152>
 8004810:	2340      	movs	r3, #64	; 0x40
 8004812:	eba0 000a 	sub.w	r0, r0, sl
 8004816:	fa03 f000 	lsl.w	r0, r3, r0
 800481a:	9b04      	ldr	r3, [sp, #16]
 800481c:	4303      	orrs	r3, r0
 800481e:	3401      	adds	r4, #1
 8004820:	9304      	str	r3, [sp, #16]
 8004822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004826:	4826      	ldr	r0, [pc, #152]	; (80048c0 <_svfiprintf_r+0x1f0>)
 8004828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800482c:	2206      	movs	r2, #6
 800482e:	f7fb fcdf 	bl	80001f0 <memchr>
 8004832:	2800      	cmp	r0, #0
 8004834:	d038      	beq.n	80048a8 <_svfiprintf_r+0x1d8>
 8004836:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <_svfiprintf_r+0x1f4>)
 8004838:	bb1b      	cbnz	r3, 8004882 <_svfiprintf_r+0x1b2>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	3307      	adds	r3, #7
 800483e:	f023 0307 	bic.w	r3, r3, #7
 8004842:	3308      	adds	r3, #8
 8004844:	9303      	str	r3, [sp, #12]
 8004846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004848:	4433      	add	r3, r6
 800484a:	9309      	str	r3, [sp, #36]	; 0x24
 800484c:	e767      	b.n	800471e <_svfiprintf_r+0x4e>
 800484e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004852:	460c      	mov	r4, r1
 8004854:	2001      	movs	r0, #1
 8004856:	e7a5      	b.n	80047a4 <_svfiprintf_r+0xd4>
 8004858:	2300      	movs	r3, #0
 800485a:	3401      	adds	r4, #1
 800485c:	9305      	str	r3, [sp, #20]
 800485e:	4619      	mov	r1, r3
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4620      	mov	r0, r4
 8004866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800486a:	3a30      	subs	r2, #48	; 0x30
 800486c:	2a09      	cmp	r2, #9
 800486e:	d903      	bls.n	8004878 <_svfiprintf_r+0x1a8>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0c5      	beq.n	8004800 <_svfiprintf_r+0x130>
 8004874:	9105      	str	r1, [sp, #20]
 8004876:	e7c3      	b.n	8004800 <_svfiprintf_r+0x130>
 8004878:	fb0c 2101 	mla	r1, ip, r1, r2
 800487c:	4604      	mov	r4, r0
 800487e:	2301      	movs	r3, #1
 8004880:	e7f0      	b.n	8004864 <_svfiprintf_r+0x194>
 8004882:	ab03      	add	r3, sp, #12
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	462a      	mov	r2, r5
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <_svfiprintf_r+0x1f8>)
 800488a:	a904      	add	r1, sp, #16
 800488c:	4638      	mov	r0, r7
 800488e:	f3af 8000 	nop.w
 8004892:	1c42      	adds	r2, r0, #1
 8004894:	4606      	mov	r6, r0
 8004896:	d1d6      	bne.n	8004846 <_svfiprintf_r+0x176>
 8004898:	89ab      	ldrh	r3, [r5, #12]
 800489a:	065b      	lsls	r3, r3, #25
 800489c:	f53f af2c 	bmi.w	80046f8 <_svfiprintf_r+0x28>
 80048a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a2:	b01d      	add	sp, #116	; 0x74
 80048a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a8:	ab03      	add	r3, sp, #12
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	462a      	mov	r2, r5
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <_svfiprintf_r+0x1f8>)
 80048b0:	a904      	add	r1, sp, #16
 80048b2:	4638      	mov	r0, r7
 80048b4:	f000 f9d4 	bl	8004c60 <_printf_i>
 80048b8:	e7eb      	b.n	8004892 <_svfiprintf_r+0x1c2>
 80048ba:	bf00      	nop
 80048bc:	08005961 	.word	0x08005961
 80048c0:	0800596b 	.word	0x0800596b
 80048c4:	00000000 	.word	0x00000000
 80048c8:	08004619 	.word	0x08004619
 80048cc:	08005967 	.word	0x08005967

080048d0 <__sfputc_r>:
 80048d0:	6893      	ldr	r3, [r2, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	b410      	push	{r4}
 80048d8:	6093      	str	r3, [r2, #8]
 80048da:	da08      	bge.n	80048ee <__sfputc_r+0x1e>
 80048dc:	6994      	ldr	r4, [r2, #24]
 80048de:	42a3      	cmp	r3, r4
 80048e0:	db01      	blt.n	80048e6 <__sfputc_r+0x16>
 80048e2:	290a      	cmp	r1, #10
 80048e4:	d103      	bne.n	80048ee <__sfputc_r+0x1e>
 80048e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ea:	f000 baef 	b.w	8004ecc <__swbuf_r>
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	1c58      	adds	r0, r3, #1
 80048f2:	6010      	str	r0, [r2, #0]
 80048f4:	7019      	strb	r1, [r3, #0]
 80048f6:	4608      	mov	r0, r1
 80048f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <__sfputs_r>:
 80048fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	4614      	mov	r4, r2
 8004906:	18d5      	adds	r5, r2, r3
 8004908:	42ac      	cmp	r4, r5
 800490a:	d101      	bne.n	8004910 <__sfputs_r+0x12>
 800490c:	2000      	movs	r0, #0
 800490e:	e007      	b.n	8004920 <__sfputs_r+0x22>
 8004910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004914:	463a      	mov	r2, r7
 8004916:	4630      	mov	r0, r6
 8004918:	f7ff ffda 	bl	80048d0 <__sfputc_r>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d1f3      	bne.n	8004908 <__sfputs_r+0xa>
 8004920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004924 <_vfiprintf_r>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	460d      	mov	r5, r1
 800492a:	b09d      	sub	sp, #116	; 0x74
 800492c:	4614      	mov	r4, r2
 800492e:	4698      	mov	r8, r3
 8004930:	4606      	mov	r6, r0
 8004932:	b118      	cbz	r0, 800493c <_vfiprintf_r+0x18>
 8004934:	6983      	ldr	r3, [r0, #24]
 8004936:	b90b      	cbnz	r3, 800493c <_vfiprintf_r+0x18>
 8004938:	f000 fcaa 	bl	8005290 <__sinit>
 800493c:	4b89      	ldr	r3, [pc, #548]	; (8004b64 <_vfiprintf_r+0x240>)
 800493e:	429d      	cmp	r5, r3
 8004940:	d11b      	bne.n	800497a <_vfiprintf_r+0x56>
 8004942:	6875      	ldr	r5, [r6, #4]
 8004944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004946:	07d9      	lsls	r1, r3, #31
 8004948:	d405      	bmi.n	8004956 <_vfiprintf_r+0x32>
 800494a:	89ab      	ldrh	r3, [r5, #12]
 800494c:	059a      	lsls	r2, r3, #22
 800494e:	d402      	bmi.n	8004956 <_vfiprintf_r+0x32>
 8004950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004952:	f000 fd3b 	bl	80053cc <__retarget_lock_acquire_recursive>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	071b      	lsls	r3, r3, #28
 800495a:	d501      	bpl.n	8004960 <_vfiprintf_r+0x3c>
 800495c:	692b      	ldr	r3, [r5, #16]
 800495e:	b9eb      	cbnz	r3, 800499c <_vfiprintf_r+0x78>
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f000 fb04 	bl	8004f70 <__swsetup_r>
 8004968:	b1c0      	cbz	r0, 800499c <_vfiprintf_r+0x78>
 800496a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800496c:	07dc      	lsls	r4, r3, #31
 800496e:	d50e      	bpl.n	800498e <_vfiprintf_r+0x6a>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	b01d      	add	sp, #116	; 0x74
 8004976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497a:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <_vfiprintf_r+0x244>)
 800497c:	429d      	cmp	r5, r3
 800497e:	d101      	bne.n	8004984 <_vfiprintf_r+0x60>
 8004980:	68b5      	ldr	r5, [r6, #8]
 8004982:	e7df      	b.n	8004944 <_vfiprintf_r+0x20>
 8004984:	4b79      	ldr	r3, [pc, #484]	; (8004b6c <_vfiprintf_r+0x248>)
 8004986:	429d      	cmp	r5, r3
 8004988:	bf08      	it	eq
 800498a:	68f5      	ldreq	r5, [r6, #12]
 800498c:	e7da      	b.n	8004944 <_vfiprintf_r+0x20>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	0598      	lsls	r0, r3, #22
 8004992:	d4ed      	bmi.n	8004970 <_vfiprintf_r+0x4c>
 8004994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004996:	f000 fd1a 	bl	80053ce <__retarget_lock_release_recursive>
 800499a:	e7e9      	b.n	8004970 <_vfiprintf_r+0x4c>
 800499c:	2300      	movs	r3, #0
 800499e:	9309      	str	r3, [sp, #36]	; 0x24
 80049a0:	2320      	movs	r3, #32
 80049a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049aa:	2330      	movs	r3, #48	; 0x30
 80049ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b70 <_vfiprintf_r+0x24c>
 80049b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049b4:	f04f 0901 	mov.w	r9, #1
 80049b8:	4623      	mov	r3, r4
 80049ba:	469a      	mov	sl, r3
 80049bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049c0:	b10a      	cbz	r2, 80049c6 <_vfiprintf_r+0xa2>
 80049c2:	2a25      	cmp	r2, #37	; 0x25
 80049c4:	d1f9      	bne.n	80049ba <_vfiprintf_r+0x96>
 80049c6:	ebba 0b04 	subs.w	fp, sl, r4
 80049ca:	d00b      	beq.n	80049e4 <_vfiprintf_r+0xc0>
 80049cc:	465b      	mov	r3, fp
 80049ce:	4622      	mov	r2, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	4630      	mov	r0, r6
 80049d4:	f7ff ff93 	bl	80048fe <__sfputs_r>
 80049d8:	3001      	adds	r0, #1
 80049da:	f000 80aa 	beq.w	8004b32 <_vfiprintf_r+0x20e>
 80049de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049e0:	445a      	add	r2, fp
 80049e2:	9209      	str	r2, [sp, #36]	; 0x24
 80049e4:	f89a 3000 	ldrb.w	r3, [sl]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a2 	beq.w	8004b32 <_vfiprintf_r+0x20e>
 80049ee:	2300      	movs	r3, #0
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049f8:	f10a 0a01 	add.w	sl, sl, #1
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	9307      	str	r3, [sp, #28]
 8004a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a04:	931a      	str	r3, [sp, #104]	; 0x68
 8004a06:	4654      	mov	r4, sl
 8004a08:	2205      	movs	r2, #5
 8004a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0e:	4858      	ldr	r0, [pc, #352]	; (8004b70 <_vfiprintf_r+0x24c>)
 8004a10:	f7fb fbee 	bl	80001f0 <memchr>
 8004a14:	9a04      	ldr	r2, [sp, #16]
 8004a16:	b9d8      	cbnz	r0, 8004a50 <_vfiprintf_r+0x12c>
 8004a18:	06d1      	lsls	r1, r2, #27
 8004a1a:	bf44      	itt	mi
 8004a1c:	2320      	movmi	r3, #32
 8004a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a22:	0713      	lsls	r3, r2, #28
 8004a24:	bf44      	itt	mi
 8004a26:	232b      	movmi	r3, #43	; 0x2b
 8004a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a30:	2b2a      	cmp	r3, #42	; 0x2a
 8004a32:	d015      	beq.n	8004a60 <_vfiprintf_r+0x13c>
 8004a34:	9a07      	ldr	r2, [sp, #28]
 8004a36:	4654      	mov	r4, sl
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f04f 0c0a 	mov.w	ip, #10
 8004a3e:	4621      	mov	r1, r4
 8004a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a44:	3b30      	subs	r3, #48	; 0x30
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	d94e      	bls.n	8004ae8 <_vfiprintf_r+0x1c4>
 8004a4a:	b1b0      	cbz	r0, 8004a7a <_vfiprintf_r+0x156>
 8004a4c:	9207      	str	r2, [sp, #28]
 8004a4e:	e014      	b.n	8004a7a <_vfiprintf_r+0x156>
 8004a50:	eba0 0308 	sub.w	r3, r0, r8
 8004a54:	fa09 f303 	lsl.w	r3, r9, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	46a2      	mov	sl, r4
 8004a5e:	e7d2      	b.n	8004a06 <_vfiprintf_r+0xe2>
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	1d19      	adds	r1, r3, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	9103      	str	r1, [sp, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bfbb      	ittet	lt
 8004a6c:	425b      	neglt	r3, r3
 8004a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8004a72:	9307      	strge	r3, [sp, #28]
 8004a74:	9307      	strlt	r3, [sp, #28]
 8004a76:	bfb8      	it	lt
 8004a78:	9204      	strlt	r2, [sp, #16]
 8004a7a:	7823      	ldrb	r3, [r4, #0]
 8004a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a7e:	d10c      	bne.n	8004a9a <_vfiprintf_r+0x176>
 8004a80:	7863      	ldrb	r3, [r4, #1]
 8004a82:	2b2a      	cmp	r3, #42	; 0x2a
 8004a84:	d135      	bne.n	8004af2 <_vfiprintf_r+0x1ce>
 8004a86:	9b03      	ldr	r3, [sp, #12]
 8004a88:	1d1a      	adds	r2, r3, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	9203      	str	r2, [sp, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfb8      	it	lt
 8004a92:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a96:	3402      	adds	r4, #2
 8004a98:	9305      	str	r3, [sp, #20]
 8004a9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b80 <_vfiprintf_r+0x25c>
 8004a9e:	7821      	ldrb	r1, [r4, #0]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	f7fb fba4 	bl	80001f0 <memchr>
 8004aa8:	b140      	cbz	r0, 8004abc <_vfiprintf_r+0x198>
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	eba0 000a 	sub.w	r0, r0, sl
 8004ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ab4:	9b04      	ldr	r3, [sp, #16]
 8004ab6:	4303      	orrs	r3, r0
 8004ab8:	3401      	adds	r4, #1
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac0:	482c      	ldr	r0, [pc, #176]	; (8004b74 <_vfiprintf_r+0x250>)
 8004ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ac6:	2206      	movs	r2, #6
 8004ac8:	f7fb fb92 	bl	80001f0 <memchr>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d03f      	beq.n	8004b50 <_vfiprintf_r+0x22c>
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <_vfiprintf_r+0x254>)
 8004ad2:	bb1b      	cbnz	r3, 8004b1c <_vfiprintf_r+0x1f8>
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	3307      	adds	r3, #7
 8004ad8:	f023 0307 	bic.w	r3, r3, #7
 8004adc:	3308      	adds	r3, #8
 8004ade:	9303      	str	r3, [sp, #12]
 8004ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae2:	443b      	add	r3, r7
 8004ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae6:	e767      	b.n	80049b8 <_vfiprintf_r+0x94>
 8004ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aec:	460c      	mov	r4, r1
 8004aee:	2001      	movs	r0, #1
 8004af0:	e7a5      	b.n	8004a3e <_vfiprintf_r+0x11a>
 8004af2:	2300      	movs	r3, #0
 8004af4:	3401      	adds	r4, #1
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f04f 0c0a 	mov.w	ip, #10
 8004afe:	4620      	mov	r0, r4
 8004b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b04:	3a30      	subs	r2, #48	; 0x30
 8004b06:	2a09      	cmp	r2, #9
 8004b08:	d903      	bls.n	8004b12 <_vfiprintf_r+0x1ee>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0c5      	beq.n	8004a9a <_vfiprintf_r+0x176>
 8004b0e:	9105      	str	r1, [sp, #20]
 8004b10:	e7c3      	b.n	8004a9a <_vfiprintf_r+0x176>
 8004b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b16:	4604      	mov	r4, r0
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e7f0      	b.n	8004afe <_vfiprintf_r+0x1da>
 8004b1c:	ab03      	add	r3, sp, #12
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	462a      	mov	r2, r5
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <_vfiprintf_r+0x258>)
 8004b24:	a904      	add	r1, sp, #16
 8004b26:	4630      	mov	r0, r6
 8004b28:	f3af 8000 	nop.w
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	1c78      	adds	r0, r7, #1
 8004b30:	d1d6      	bne.n	8004ae0 <_vfiprintf_r+0x1bc>
 8004b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b34:	07d9      	lsls	r1, r3, #31
 8004b36:	d405      	bmi.n	8004b44 <_vfiprintf_r+0x220>
 8004b38:	89ab      	ldrh	r3, [r5, #12]
 8004b3a:	059a      	lsls	r2, r3, #22
 8004b3c:	d402      	bmi.n	8004b44 <_vfiprintf_r+0x220>
 8004b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b40:	f000 fc45 	bl	80053ce <__retarget_lock_release_recursive>
 8004b44:	89ab      	ldrh	r3, [r5, #12]
 8004b46:	065b      	lsls	r3, r3, #25
 8004b48:	f53f af12 	bmi.w	8004970 <_vfiprintf_r+0x4c>
 8004b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4e:	e711      	b.n	8004974 <_vfiprintf_r+0x50>
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <_vfiprintf_r+0x258>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 f880 	bl	8004c60 <_printf_i>
 8004b60:	e7e4      	b.n	8004b2c <_vfiprintf_r+0x208>
 8004b62:	bf00      	nop
 8004b64:	080059b4 	.word	0x080059b4
 8004b68:	080059d4 	.word	0x080059d4
 8004b6c:	08005994 	.word	0x08005994
 8004b70:	08005961 	.word	0x08005961
 8004b74:	0800596b 	.word	0x0800596b
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	080048ff 	.word	0x080048ff
 8004b80:	08005967 	.word	0x08005967

08004b84 <_printf_common>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	4616      	mov	r6, r2
 8004b8a:	4699      	mov	r9, r3
 8004b8c:	688a      	ldr	r2, [r1, #8]
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bfb8      	it	lt
 8004b98:	4613      	movlt	r3, r2
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b10a      	cbz	r2, 8004baa <_printf_common+0x26>
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	0699      	lsls	r1, r3, #26
 8004bae:	bf42      	ittt	mi
 8004bb0:	6833      	ldrmi	r3, [r6, #0]
 8004bb2:	3302      	addmi	r3, #2
 8004bb4:	6033      	strmi	r3, [r6, #0]
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	f015 0506 	ands.w	r5, r5, #6
 8004bbc:	d106      	bne.n	8004bcc <_printf_common+0x48>
 8004bbe:	f104 0a19 	add.w	sl, r4, #25
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	6832      	ldr	r2, [r6, #0]
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dc26      	bgt.n	8004c1a <_printf_common+0x96>
 8004bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd0:	1e13      	subs	r3, r2, #0
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	0692      	lsls	r2, r2, #26
 8004bda:	d42b      	bmi.n	8004c34 <_printf_common+0xb0>
 8004bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d01e      	beq.n	8004c28 <_printf_common+0xa4>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	68e5      	ldr	r5, [r4, #12]
 8004bee:	6832      	ldr	r2, [r6, #0]
 8004bf0:	f003 0306 	and.w	r3, r3, #6
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	bf08      	it	eq
 8004bf8:	1aad      	subeq	r5, r5, r2
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	6922      	ldr	r2, [r4, #16]
 8004bfe:	bf0c      	ite	eq
 8004c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c04:	2500      	movne	r5, #0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfc4      	itt	gt
 8004c0a:	1a9b      	subgt	r3, r3, r2
 8004c0c:	18ed      	addgt	r5, r5, r3
 8004c0e:	2600      	movs	r6, #0
 8004c10:	341a      	adds	r4, #26
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	d11a      	bne.n	8004c4c <_printf_common+0xc8>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e008      	b.n	8004c2c <_printf_common+0xa8>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4638      	mov	r0, r7
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d103      	bne.n	8004c30 <_printf_common+0xac>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3501      	adds	r5, #1
 8004c32:	e7c6      	b.n	8004bc2 <_printf_common+0x3e>
 8004c34:	18e1      	adds	r1, r4, r3
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	2030      	movs	r0, #48	; 0x30
 8004c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c3e:	4422      	add	r2, r4
 8004c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c48:	3302      	adds	r3, #2
 8004c4a:	e7c7      	b.n	8004bdc <_printf_common+0x58>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa4>
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7d9      	b.n	8004c12 <_printf_common+0x8e>
	...

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	7e0f      	ldrb	r7, [r1, #24]
 8004c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c68:	2f78      	cmp	r7, #120	; 0x78
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	469a      	mov	sl, r3
 8004c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	; 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d8 	beq.w	8004e32 <_printf_i+0x1d2>
 8004c82:	2f58      	cmp	r7, #88	; 0x58
 8004c84:	f000 80a3 	beq.w	8004dce <_printf_i+0x16e>
 8004c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e19 	.word	0x08004e19
 8004cd0:	08004d3d 	.word	0x08004d3d
 8004cd4:	08004dfb 	.word	0x08004dfb
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e3b 	.word	0x08004e3b
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004e03 	.word	0x08004e03
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0a3      	b.n	8004e54 <_printf_i+0x1f4>
 8004d0c:	6820      	ldr	r0, [r4, #0]
 8004d0e:	6829      	ldr	r1, [r5, #0]
 8004d10:	0606      	lsls	r6, r0, #24
 8004d12:	f101 0304 	add.w	r3, r1, #4
 8004d16:	d50a      	bpl.n	8004d2e <_printf_i+0xce>
 8004d18:	680e      	ldr	r6, [r1, #0]
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	2e00      	cmp	r6, #0
 8004d1e:	da03      	bge.n	8004d28 <_printf_i+0xc8>
 8004d20:	232d      	movs	r3, #45	; 0x2d
 8004d22:	4276      	negs	r6, r6
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	485e      	ldr	r0, [pc, #376]	; (8004ea4 <_printf_i+0x244>)
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	e019      	b.n	8004d62 <_printf_i+0x102>
 8004d2e:	680e      	ldr	r6, [r1, #0]
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d36:	bf18      	it	ne
 8004d38:	b236      	sxthne	r6, r6
 8004d3a:	e7ef      	b.n	8004d1c <_printf_i+0xbc>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	1d19      	adds	r1, r3, #4
 8004d42:	6029      	str	r1, [r5, #0]
 8004d44:	0601      	lsls	r1, r0, #24
 8004d46:	d501      	bpl.n	8004d4c <_printf_i+0xec>
 8004d48:	681e      	ldr	r6, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <_printf_i+0xf2>
 8004d4c:	0646      	lsls	r6, r0, #25
 8004d4e:	d5fb      	bpl.n	8004d48 <_printf_i+0xe8>
 8004d50:	881e      	ldrh	r6, [r3, #0]
 8004d52:	4854      	ldr	r0, [pc, #336]	; (8004ea4 <_printf_i+0x244>)
 8004d54:	2f6f      	cmp	r7, #111	; 0x6f
 8004d56:	bf0c      	ite	eq
 8004d58:	2308      	moveq	r3, #8
 8004d5a:	230a      	movne	r3, #10
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d62:	6865      	ldr	r5, [r4, #4]
 8004d64:	60a5      	str	r5, [r4, #8]
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	bfa2      	ittt	ge
 8004d6a:	6821      	ldrge	r1, [r4, #0]
 8004d6c:	f021 0104 	bicge.w	r1, r1, #4
 8004d70:	6021      	strge	r1, [r4, #0]
 8004d72:	b90e      	cbnz	r6, 8004d78 <_printf_i+0x118>
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	d04d      	beq.n	8004e14 <_printf_i+0x1b4>
 8004d78:	4615      	mov	r5, r2
 8004d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d82:	5dc7      	ldrb	r7, [r0, r7]
 8004d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d88:	4637      	mov	r7, r6
 8004d8a:	42bb      	cmp	r3, r7
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	d9f4      	bls.n	8004d7a <_printf_i+0x11a>
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10b      	bne.n	8004dac <_printf_i+0x14c>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	07de      	lsls	r6, r3, #31
 8004d98:	d508      	bpl.n	8004dac <_printf_i+0x14c>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6861      	ldr	r1, [r4, #4]
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	bfde      	ittt	le
 8004da2:	2330      	movle	r3, #48	; 0x30
 8004da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dac:	1b52      	subs	r2, r2, r5
 8004dae:	6122      	str	r2, [r4, #16]
 8004db0:	f8cd a000 	str.w	sl, [sp]
 8004db4:	464b      	mov	r3, r9
 8004db6:	aa03      	add	r2, sp, #12
 8004db8:	4621      	mov	r1, r4
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f7ff fee2 	bl	8004b84 <_printf_common>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d14c      	bne.n	8004e5e <_printf_i+0x1fe>
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	b004      	add	sp, #16
 8004dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dce:	4835      	ldr	r0, [pc, #212]	; (8004ea4 <_printf_i+0x244>)
 8004dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dd4:	6829      	ldr	r1, [r5, #0]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ddc:	6029      	str	r1, [r5, #0]
 8004dde:	061d      	lsls	r5, r3, #24
 8004de0:	d514      	bpl.n	8004e0c <_printf_i+0x1ac>
 8004de2:	07df      	lsls	r7, r3, #31
 8004de4:	bf44      	itt	mi
 8004de6:	f043 0320 	orrmi.w	r3, r3, #32
 8004dea:	6023      	strmi	r3, [r4, #0]
 8004dec:	b91e      	cbnz	r6, 8004df6 <_printf_i+0x196>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f023 0320 	bic.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2310      	movs	r3, #16
 8004df8:	e7b0      	b.n	8004d5c <_printf_i+0xfc>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	f043 0320 	orr.w	r3, r3, #32
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	2378      	movs	r3, #120	; 0x78
 8004e04:	4828      	ldr	r0, [pc, #160]	; (8004ea8 <_printf_i+0x248>)
 8004e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e0a:	e7e3      	b.n	8004dd4 <_printf_i+0x174>
 8004e0c:	0659      	lsls	r1, r3, #25
 8004e0e:	bf48      	it	mi
 8004e10:	b2b6      	uxthmi	r6, r6
 8004e12:	e7e6      	b.n	8004de2 <_printf_i+0x182>
 8004e14:	4615      	mov	r5, r2
 8004e16:	e7bb      	b.n	8004d90 <_printf_i+0x130>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	6826      	ldr	r6, [r4, #0]
 8004e1c:	6961      	ldr	r1, [r4, #20]
 8004e1e:	1d18      	adds	r0, r3, #4
 8004e20:	6028      	str	r0, [r5, #0]
 8004e22:	0635      	lsls	r5, r6, #24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0x1cc>
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0x1d2>
 8004e2c:	0670      	lsls	r0, r6, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0x1c8>
 8004e30:	8019      	strh	r1, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	4615      	mov	r5, r2
 8004e38:	e7ba      	b.n	8004db0 <_printf_i+0x150>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	602a      	str	r2, [r5, #0]
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb f9d2 	bl	80001f0 <memchr>
 8004e4c:	b108      	cbz	r0, 8004e52 <_printf_i+0x1f2>
 8004e4e:	1b40      	subs	r0, r0, r5
 8004e50:	6060      	str	r0, [r4, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5c:	e7a8      	b.n	8004db0 <_printf_i+0x150>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	47d0      	blx	sl
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0ab      	beq.n	8004dc4 <_printf_i+0x164>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d413      	bmi.n	8004e9a <_printf_i+0x23a>
 8004e72:	68e0      	ldr	r0, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	4298      	cmp	r0, r3
 8004e78:	bfb8      	it	lt
 8004e7a:	4618      	movlt	r0, r3
 8004e7c:	e7a4      	b.n	8004dc8 <_printf_i+0x168>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09b      	beq.n	8004dc4 <_printf_i+0x164>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9903      	ldr	r1, [sp, #12]
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf2      	bgt.n	8004e7e <_printf_i+0x21e>
 8004e98:	e7eb      	b.n	8004e72 <_printf_i+0x212>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	f104 0619 	add.w	r6, r4, #25
 8004ea0:	e7f5      	b.n	8004e8e <_printf_i+0x22e>
 8004ea2:	bf00      	nop
 8004ea4:	08005972 	.word	0x08005972
 8004ea8:	08005983 	.word	0x08005983

08004eac <_sbrk_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d06      	ldr	r5, [pc, #24]	; (8004ec8 <_sbrk_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fc f8d2 	bl	8001060 <_sbrk>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_sbrk_r+0x1a>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_sbrk_r+0x1a>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	20000854 	.word	0x20000854

08004ecc <__swbuf_r>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	460e      	mov	r6, r1
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	b118      	cbz	r0, 8004ede <__swbuf_r+0x12>
 8004ed6:	6983      	ldr	r3, [r0, #24]
 8004ed8:	b90b      	cbnz	r3, 8004ede <__swbuf_r+0x12>
 8004eda:	f000 f9d9 	bl	8005290 <__sinit>
 8004ede:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <__swbuf_r+0x98>)
 8004ee0:	429c      	cmp	r4, r3
 8004ee2:	d12b      	bne.n	8004f3c <__swbuf_r+0x70>
 8004ee4:	686c      	ldr	r4, [r5, #4]
 8004ee6:	69a3      	ldr	r3, [r4, #24]
 8004ee8:	60a3      	str	r3, [r4, #8]
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	071a      	lsls	r2, r3, #28
 8004eee:	d52f      	bpl.n	8004f50 <__swbuf_r+0x84>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	b36b      	cbz	r3, 8004f50 <__swbuf_r+0x84>
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	1ac0      	subs	r0, r0, r3
 8004efa:	6963      	ldr	r3, [r4, #20]
 8004efc:	b2f6      	uxtb	r6, r6
 8004efe:	4283      	cmp	r3, r0
 8004f00:	4637      	mov	r7, r6
 8004f02:	dc04      	bgt.n	8004f0e <__swbuf_r+0x42>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f92e 	bl	8005168 <_fflush_r>
 8004f0c:	bb30      	cbnz	r0, 8004f5c <__swbuf_r+0x90>
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	60a3      	str	r3, [r4, #8]
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	6022      	str	r2, [r4, #0]
 8004f1a:	701e      	strb	r6, [r3, #0]
 8004f1c:	6963      	ldr	r3, [r4, #20]
 8004f1e:	3001      	adds	r0, #1
 8004f20:	4283      	cmp	r3, r0
 8004f22:	d004      	beq.n	8004f2e <__swbuf_r+0x62>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	07db      	lsls	r3, r3, #31
 8004f28:	d506      	bpl.n	8004f38 <__swbuf_r+0x6c>
 8004f2a:	2e0a      	cmp	r6, #10
 8004f2c:	d104      	bne.n	8004f38 <__swbuf_r+0x6c>
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 f919 	bl	8005168 <_fflush_r>
 8004f36:	b988      	cbnz	r0, 8004f5c <__swbuf_r+0x90>
 8004f38:	4638      	mov	r0, r7
 8004f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <__swbuf_r+0x9c>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d101      	bne.n	8004f46 <__swbuf_r+0x7a>
 8004f42:	68ac      	ldr	r4, [r5, #8]
 8004f44:	e7cf      	b.n	8004ee6 <__swbuf_r+0x1a>
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <__swbuf_r+0xa0>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	bf08      	it	eq
 8004f4c:	68ec      	ldreq	r4, [r5, #12]
 8004f4e:	e7ca      	b.n	8004ee6 <__swbuf_r+0x1a>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f80c 	bl	8004f70 <__swsetup_r>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d0cb      	beq.n	8004ef4 <__swbuf_r+0x28>
 8004f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f60:	e7ea      	b.n	8004f38 <__swbuf_r+0x6c>
 8004f62:	bf00      	nop
 8004f64:	080059b4 	.word	0x080059b4
 8004f68:	080059d4 	.word	0x080059d4
 8004f6c:	08005994 	.word	0x08005994

08004f70 <__swsetup_r>:
 8004f70:	4b32      	ldr	r3, [pc, #200]	; (800503c <__swsetup_r+0xcc>)
 8004f72:	b570      	push	{r4, r5, r6, lr}
 8004f74:	681d      	ldr	r5, [r3, #0]
 8004f76:	4606      	mov	r6, r0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	b125      	cbz	r5, 8004f86 <__swsetup_r+0x16>
 8004f7c:	69ab      	ldr	r3, [r5, #24]
 8004f7e:	b913      	cbnz	r3, 8004f86 <__swsetup_r+0x16>
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 f985 	bl	8005290 <__sinit>
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <__swsetup_r+0xd0>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	d10f      	bne.n	8004fac <__swsetup_r+0x3c>
 8004f8c:	686c      	ldr	r4, [r5, #4]
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f94:	0719      	lsls	r1, r3, #28
 8004f96:	d42c      	bmi.n	8004ff2 <__swsetup_r+0x82>
 8004f98:	06dd      	lsls	r5, r3, #27
 8004f9a:	d411      	bmi.n	8004fc0 <__swsetup_r+0x50>
 8004f9c:	2309      	movs	r3, #9
 8004f9e:	6033      	str	r3, [r6, #0]
 8004fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004faa:	e03e      	b.n	800502a <__swsetup_r+0xba>
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <__swsetup_r+0xd4>)
 8004fae:	429c      	cmp	r4, r3
 8004fb0:	d101      	bne.n	8004fb6 <__swsetup_r+0x46>
 8004fb2:	68ac      	ldr	r4, [r5, #8]
 8004fb4:	e7eb      	b.n	8004f8e <__swsetup_r+0x1e>
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <__swsetup_r+0xd8>)
 8004fb8:	429c      	cmp	r4, r3
 8004fba:	bf08      	it	eq
 8004fbc:	68ec      	ldreq	r4, [r5, #12]
 8004fbe:	e7e6      	b.n	8004f8e <__swsetup_r+0x1e>
 8004fc0:	0758      	lsls	r0, r3, #29
 8004fc2:	d512      	bpl.n	8004fea <__swsetup_r+0x7a>
 8004fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc6:	b141      	cbz	r1, 8004fda <__swsetup_r+0x6a>
 8004fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	d002      	beq.n	8004fd6 <__swsetup_r+0x66>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f7ff fa41 	bl	8004458 <_free_r>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6063      	str	r3, [r4, #4]
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f043 0308 	orr.w	r3, r3, #8
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	b94b      	cbnz	r3, 800500a <__swsetup_r+0x9a>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005000:	d003      	beq.n	800500a <__swsetup_r+0x9a>
 8005002:	4621      	mov	r1, r4
 8005004:	4630      	mov	r0, r6
 8005006:	f000 fa09 	bl	800541c <__smakebuf_r>
 800500a:	89a0      	ldrh	r0, [r4, #12]
 800500c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005010:	f010 0301 	ands.w	r3, r0, #1
 8005014:	d00a      	beq.n	800502c <__swsetup_r+0xbc>
 8005016:	2300      	movs	r3, #0
 8005018:	60a3      	str	r3, [r4, #8]
 800501a:	6963      	ldr	r3, [r4, #20]
 800501c:	425b      	negs	r3, r3
 800501e:	61a3      	str	r3, [r4, #24]
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	b943      	cbnz	r3, 8005036 <__swsetup_r+0xc6>
 8005024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005028:	d1ba      	bne.n	8004fa0 <__swsetup_r+0x30>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	0781      	lsls	r1, r0, #30
 800502e:	bf58      	it	pl
 8005030:	6963      	ldrpl	r3, [r4, #20]
 8005032:	60a3      	str	r3, [r4, #8]
 8005034:	e7f4      	b.n	8005020 <__swsetup_r+0xb0>
 8005036:	2000      	movs	r0, #0
 8005038:	e7f7      	b.n	800502a <__swsetup_r+0xba>
 800503a:	bf00      	nop
 800503c:	2000000c 	.word	0x2000000c
 8005040:	080059b4 	.word	0x080059b4
 8005044:	080059d4 	.word	0x080059d4
 8005048:	08005994 	.word	0x08005994

0800504c <abort>:
 800504c:	b508      	push	{r3, lr}
 800504e:	2006      	movs	r0, #6
 8005050:	f000 fab0 	bl	80055b4 <raise>
 8005054:	2001      	movs	r0, #1
 8005056:	f7fb ff8b 	bl	8000f70 <_exit>
	...

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	0710      	lsls	r0, r2, #28
 8005066:	460c      	mov	r4, r1
 8005068:	d458      	bmi.n	800511c <__sflush_r+0xc0>
 800506a:	684b      	ldr	r3, [r1, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc05      	bgt.n	800507c <__sflush_r+0x20>
 8005070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	dc02      	bgt.n	800507c <__sflush_r+0x20>
 8005076:	2000      	movs	r0, #0
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507e:	2e00      	cmp	r6, #0
 8005080:	d0f9      	beq.n	8005076 <__sflush_r+0x1a>
 8005082:	2300      	movs	r3, #0
 8005084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005088:	682f      	ldr	r7, [r5, #0]
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	d032      	beq.n	80050f4 <__sflush_r+0x98>
 800508e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	075a      	lsls	r2, r3, #29
 8005094:	d505      	bpl.n	80050a2 <__sflush_r+0x46>
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800509c:	b10b      	cbz	r3, 80050a2 <__sflush_r+0x46>
 800509e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a0:	1ac0      	subs	r0, r0, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	4602      	mov	r2, r0
 80050a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b0      	blx	r6
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	d106      	bne.n	80050c2 <__sflush_r+0x66>
 80050b4:	6829      	ldr	r1, [r5, #0]
 80050b6:	291d      	cmp	r1, #29
 80050b8:	d82c      	bhi.n	8005114 <__sflush_r+0xb8>
 80050ba:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <__sflush_r+0x108>)
 80050bc:	40ca      	lsrs	r2, r1
 80050be:	07d6      	lsls	r6, r2, #31
 80050c0:	d528      	bpl.n	8005114 <__sflush_r+0xb8>
 80050c2:	2200      	movs	r2, #0
 80050c4:	6062      	str	r2, [r4, #4]
 80050c6:	04d9      	lsls	r1, r3, #19
 80050c8:	6922      	ldr	r2, [r4, #16]
 80050ca:	6022      	str	r2, [r4, #0]
 80050cc:	d504      	bpl.n	80050d8 <__sflush_r+0x7c>
 80050ce:	1c42      	adds	r2, r0, #1
 80050d0:	d101      	bne.n	80050d6 <__sflush_r+0x7a>
 80050d2:	682b      	ldr	r3, [r5, #0]
 80050d4:	b903      	cbnz	r3, 80050d8 <__sflush_r+0x7c>
 80050d6:	6560      	str	r0, [r4, #84]	; 0x54
 80050d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050da:	602f      	str	r7, [r5, #0]
 80050dc:	2900      	cmp	r1, #0
 80050de:	d0ca      	beq.n	8005076 <__sflush_r+0x1a>
 80050e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d002      	beq.n	80050ee <__sflush_r+0x92>
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7ff f9b5 	bl	8004458 <_free_r>
 80050ee:	2000      	movs	r0, #0
 80050f0:	6360      	str	r0, [r4, #52]	; 0x34
 80050f2:	e7c1      	b.n	8005078 <__sflush_r+0x1c>
 80050f4:	6a21      	ldr	r1, [r4, #32]
 80050f6:	2301      	movs	r3, #1
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	1c41      	adds	r1, r0, #1
 80050fe:	d1c7      	bne.n	8005090 <__sflush_r+0x34>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0c4      	beq.n	8005090 <__sflush_r+0x34>
 8005106:	2b1d      	cmp	r3, #29
 8005108:	d001      	beq.n	800510e <__sflush_r+0xb2>
 800510a:	2b16      	cmp	r3, #22
 800510c:	d101      	bne.n	8005112 <__sflush_r+0xb6>
 800510e:	602f      	str	r7, [r5, #0]
 8005110:	e7b1      	b.n	8005076 <__sflush_r+0x1a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7ad      	b.n	8005078 <__sflush_r+0x1c>
 800511c:	690f      	ldr	r7, [r1, #16]
 800511e:	2f00      	cmp	r7, #0
 8005120:	d0a9      	beq.n	8005076 <__sflush_r+0x1a>
 8005122:	0793      	lsls	r3, r2, #30
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	600f      	str	r7, [r1, #0]
 800512c:	bf18      	it	ne
 800512e:	2300      	movne	r3, #0
 8005130:	eba6 0807 	sub.w	r8, r6, r7
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	dd9c      	ble.n	8005076 <__sflush_r+0x1a>
 800513c:	6a21      	ldr	r1, [r4, #32]
 800513e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005140:	4643      	mov	r3, r8
 8005142:	463a      	mov	r2, r7
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	2800      	cmp	r0, #0
 800514a:	dc06      	bgt.n	800515a <__sflush_r+0xfe>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e78e      	b.n	8005078 <__sflush_r+0x1c>
 800515a:	4407      	add	r7, r0
 800515c:	eba8 0800 	sub.w	r8, r8, r0
 8005160:	e7e9      	b.n	8005136 <__sflush_r+0xda>
 8005162:	bf00      	nop
 8005164:	20400001 	.word	0x20400001

08005168 <_fflush_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b913      	cbnz	r3, 8005178 <_fflush_r+0x10>
 8005172:	2500      	movs	r5, #0
 8005174:	4628      	mov	r0, r5
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	b118      	cbz	r0, 8005182 <_fflush_r+0x1a>
 800517a:	6983      	ldr	r3, [r0, #24]
 800517c:	b90b      	cbnz	r3, 8005182 <_fflush_r+0x1a>
 800517e:	f000 f887 	bl	8005290 <__sinit>
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <_fflush_r+0x6c>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d11b      	bne.n	80051c0 <_fflush_r+0x58>
 8005188:	686c      	ldr	r4, [r5, #4]
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ef      	beq.n	8005172 <_fflush_r+0xa>
 8005192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d404      	bmi.n	80051a2 <_fflush_r+0x3a>
 8005198:	0599      	lsls	r1, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_fflush_r+0x3a>
 800519c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519e:	f000 f915 	bl	80053cc <__retarget_lock_acquire_recursive>
 80051a2:	4628      	mov	r0, r5
 80051a4:	4621      	mov	r1, r4
 80051a6:	f7ff ff59 	bl	800505c <__sflush_r>
 80051aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ac:	07da      	lsls	r2, r3, #31
 80051ae:	4605      	mov	r5, r0
 80051b0:	d4e0      	bmi.n	8005174 <_fflush_r+0xc>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	059b      	lsls	r3, r3, #22
 80051b6:	d4dd      	bmi.n	8005174 <_fflush_r+0xc>
 80051b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ba:	f000 f908 	bl	80053ce <__retarget_lock_release_recursive>
 80051be:	e7d9      	b.n	8005174 <_fflush_r+0xc>
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <_fflush_r+0x70>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	d101      	bne.n	80051ca <_fflush_r+0x62>
 80051c6:	68ac      	ldr	r4, [r5, #8]
 80051c8:	e7df      	b.n	800518a <_fflush_r+0x22>
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <_fflush_r+0x74>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	bf08      	it	eq
 80051d0:	68ec      	ldreq	r4, [r5, #12]
 80051d2:	e7da      	b.n	800518a <_fflush_r+0x22>
 80051d4:	080059b4 	.word	0x080059b4
 80051d8:	080059d4 	.word	0x080059d4
 80051dc:	08005994 	.word	0x08005994

080051e0 <std>:
 80051e0:	2300      	movs	r3, #0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ee:	6083      	str	r3, [r0, #8]
 80051f0:	8181      	strh	r1, [r0, #12]
 80051f2:	6643      	str	r3, [r0, #100]	; 0x64
 80051f4:	81c2      	strh	r2, [r0, #14]
 80051f6:	6183      	str	r3, [r0, #24]
 80051f8:	4619      	mov	r1, r3
 80051fa:	2208      	movs	r2, #8
 80051fc:	305c      	adds	r0, #92	; 0x5c
 80051fe:	f7fe ffdb 	bl	80041b8 <memset>
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x38>)
 8005204:	6263      	str	r3, [r4, #36]	; 0x24
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <std+0x3c>)
 8005208:	62a3      	str	r3, [r4, #40]	; 0x28
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <std+0x40>)
 800520c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <std+0x44>)
 8005210:	6224      	str	r4, [r4, #32]
 8005212:	6323      	str	r3, [r4, #48]	; 0x30
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	080055ed 	.word	0x080055ed
 800521c:	0800560f 	.word	0x0800560f
 8005220:	08005647 	.word	0x08005647
 8005224:	0800566b 	.word	0x0800566b

08005228 <_cleanup_r>:
 8005228:	4901      	ldr	r1, [pc, #4]	; (8005230 <_cleanup_r+0x8>)
 800522a:	f000 b8af 	b.w	800538c <_fwalk_reent>
 800522e:	bf00      	nop
 8005230:	08005169 	.word	0x08005169

08005234 <__sfmoreglue>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	2268      	movs	r2, #104	; 0x68
 8005238:	1e4d      	subs	r5, r1, #1
 800523a:	4355      	muls	r5, r2
 800523c:	460e      	mov	r6, r1
 800523e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005242:	f7ff f975 	bl	8004530 <_malloc_r>
 8005246:	4604      	mov	r4, r0
 8005248:	b140      	cbz	r0, 800525c <__sfmoreglue+0x28>
 800524a:	2100      	movs	r1, #0
 800524c:	e9c0 1600 	strd	r1, r6, [r0]
 8005250:	300c      	adds	r0, #12
 8005252:	60a0      	str	r0, [r4, #8]
 8005254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005258:	f7fe ffae 	bl	80041b8 <memset>
 800525c:	4620      	mov	r0, r4
 800525e:	bd70      	pop	{r4, r5, r6, pc}

08005260 <__sfp_lock_acquire>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__sfp_lock_acquire+0x8>)
 8005262:	f000 b8b3 	b.w	80053cc <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	20000851 	.word	0x20000851

0800526c <__sfp_lock_release>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__sfp_lock_release+0x8>)
 800526e:	f000 b8ae 	b.w	80053ce <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	20000851 	.word	0x20000851

08005278 <__sinit_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sinit_lock_acquire+0x8>)
 800527a:	f000 b8a7 	b.w	80053cc <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	20000852 	.word	0x20000852

08005284 <__sinit_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sinit_lock_release+0x8>)
 8005286:	f000 b8a2 	b.w	80053ce <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	20000852 	.word	0x20000852

08005290 <__sinit>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
 8005294:	f7ff fff0 	bl	8005278 <__sinit_lock_acquire>
 8005298:	69a3      	ldr	r3, [r4, #24]
 800529a:	b11b      	cbz	r3, 80052a4 <__sinit+0x14>
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f7ff bff0 	b.w	8005284 <__sinit_lock_release>
 80052a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052a8:	6523      	str	r3, [r4, #80]	; 0x50
 80052aa:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <__sinit+0x68>)
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <__sinit+0x6c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	bf04      	itt	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	61a3      	streq	r3, [r4, #24]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f820 	bl	8005300 <__sfp>
 80052c0:	6060      	str	r0, [r4, #4]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f81c 	bl	8005300 <__sfp>
 80052c8:	60a0      	str	r0, [r4, #8]
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f818 	bl	8005300 <__sfp>
 80052d0:	2200      	movs	r2, #0
 80052d2:	60e0      	str	r0, [r4, #12]
 80052d4:	2104      	movs	r1, #4
 80052d6:	6860      	ldr	r0, [r4, #4]
 80052d8:	f7ff ff82 	bl	80051e0 <std>
 80052dc:	68a0      	ldr	r0, [r4, #8]
 80052de:	2201      	movs	r2, #1
 80052e0:	2109      	movs	r1, #9
 80052e2:	f7ff ff7d 	bl	80051e0 <std>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	2112      	movs	r1, #18
 80052ec:	f7ff ff78 	bl	80051e0 <std>
 80052f0:	2301      	movs	r3, #1
 80052f2:	61a3      	str	r3, [r4, #24]
 80052f4:	e7d2      	b.n	800529c <__sinit+0xc>
 80052f6:	bf00      	nop
 80052f8:	080057ac 	.word	0x080057ac
 80052fc:	08005229 	.word	0x08005229

08005300 <__sfp>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	4607      	mov	r7, r0
 8005304:	f7ff ffac 	bl	8005260 <__sfp_lock_acquire>
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <__sfp+0x84>)
 800530a:	681e      	ldr	r6, [r3, #0]
 800530c:	69b3      	ldr	r3, [r6, #24]
 800530e:	b913      	cbnz	r3, 8005316 <__sfp+0x16>
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff ffbd 	bl	8005290 <__sinit>
 8005316:	3648      	adds	r6, #72	; 0x48
 8005318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800531c:	3b01      	subs	r3, #1
 800531e:	d503      	bpl.n	8005328 <__sfp+0x28>
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	b30b      	cbz	r3, 8005368 <__sfp+0x68>
 8005324:	6836      	ldr	r6, [r6, #0]
 8005326:	e7f7      	b.n	8005318 <__sfp+0x18>
 8005328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800532c:	b9d5      	cbnz	r5, 8005364 <__sfp+0x64>
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <__sfp+0x88>)
 8005330:	60e3      	str	r3, [r4, #12]
 8005332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005336:	6665      	str	r5, [r4, #100]	; 0x64
 8005338:	f000 f847 	bl	80053ca <__retarget_lock_init_recursive>
 800533c:	f7ff ff96 	bl	800526c <__sfp_lock_release>
 8005340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	61a5      	str	r5, [r4, #24]
 800534c:	2208      	movs	r2, #8
 800534e:	4629      	mov	r1, r5
 8005350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005354:	f7fe ff30 	bl	80041b8 <memset>
 8005358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800535c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005360:	4620      	mov	r0, r4
 8005362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005364:	3468      	adds	r4, #104	; 0x68
 8005366:	e7d9      	b.n	800531c <__sfp+0x1c>
 8005368:	2104      	movs	r1, #4
 800536a:	4638      	mov	r0, r7
 800536c:	f7ff ff62 	bl	8005234 <__sfmoreglue>
 8005370:	4604      	mov	r4, r0
 8005372:	6030      	str	r0, [r6, #0]
 8005374:	2800      	cmp	r0, #0
 8005376:	d1d5      	bne.n	8005324 <__sfp+0x24>
 8005378:	f7ff ff78 	bl	800526c <__sfp_lock_release>
 800537c:	230c      	movs	r3, #12
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	e7ee      	b.n	8005360 <__sfp+0x60>
 8005382:	bf00      	nop
 8005384:	080057ac 	.word	0x080057ac
 8005388:	ffff0001 	.word	0xffff0001

0800538c <_fwalk_reent>:
 800538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	4606      	mov	r6, r0
 8005392:	4688      	mov	r8, r1
 8005394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005398:	2700      	movs	r7, #0
 800539a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800539e:	f1b9 0901 	subs.w	r9, r9, #1
 80053a2:	d505      	bpl.n	80053b0 <_fwalk_reent+0x24>
 80053a4:	6824      	ldr	r4, [r4, #0]
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	d1f7      	bne.n	800539a <_fwalk_reent+0xe>
 80053aa:	4638      	mov	r0, r7
 80053ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b0:	89ab      	ldrh	r3, [r5, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d907      	bls.n	80053c6 <_fwalk_reent+0x3a>
 80053b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ba:	3301      	adds	r3, #1
 80053bc:	d003      	beq.n	80053c6 <_fwalk_reent+0x3a>
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	47c0      	blx	r8
 80053c4:	4307      	orrs	r7, r0
 80053c6:	3568      	adds	r5, #104	; 0x68
 80053c8:	e7e9      	b.n	800539e <_fwalk_reent+0x12>

080053ca <__retarget_lock_init_recursive>:
 80053ca:	4770      	bx	lr

080053cc <__retarget_lock_acquire_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_release_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <__swhatbuf_r>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	460e      	mov	r6, r1
 80053d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d8:	2900      	cmp	r1, #0
 80053da:	b096      	sub	sp, #88	; 0x58
 80053dc:	4614      	mov	r4, r2
 80053de:	461d      	mov	r5, r3
 80053e0:	da08      	bge.n	80053f4 <__swhatbuf_r+0x24>
 80053e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	602a      	str	r2, [r5, #0]
 80053ea:	061a      	lsls	r2, r3, #24
 80053ec:	d410      	bmi.n	8005410 <__swhatbuf_r+0x40>
 80053ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f2:	e00e      	b.n	8005412 <__swhatbuf_r+0x42>
 80053f4:	466a      	mov	r2, sp
 80053f6:	f000 f95f 	bl	80056b8 <_fstat_r>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	dbf1      	blt.n	80053e2 <__swhatbuf_r+0x12>
 80053fe:	9a01      	ldr	r2, [sp, #4]
 8005400:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005404:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005408:	425a      	negs	r2, r3
 800540a:	415a      	adcs	r2, r3
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	e7ee      	b.n	80053ee <__swhatbuf_r+0x1e>
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	2000      	movs	r0, #0
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	b016      	add	sp, #88	; 0x58
 8005418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800541c <__smakebuf_r>:
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005420:	079d      	lsls	r5, r3, #30
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	d507      	bpl.n	8005438 <__smakebuf_r+0x1c>
 8005428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	2301      	movs	r3, #1
 8005432:	6163      	str	r3, [r4, #20]
 8005434:	b002      	add	sp, #8
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	ab01      	add	r3, sp, #4
 800543a:	466a      	mov	r2, sp
 800543c:	f7ff ffc8 	bl	80053d0 <__swhatbuf_r>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	4605      	mov	r5, r0
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff f873 	bl	8004530 <_malloc_r>
 800544a:	b948      	cbnz	r0, 8005460 <__smakebuf_r+0x44>
 800544c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d4ef      	bmi.n	8005434 <__smakebuf_r+0x18>
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e7e3      	b.n	8005428 <__smakebuf_r+0xc>
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <__smakebuf_r+0x7c>)
 8005462:	62b3      	str	r3, [r6, #40]	; 0x28
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	81a3      	strh	r3, [r4, #12]
 800546e:	9b00      	ldr	r3, [sp, #0]
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	6120      	str	r0, [r4, #16]
 8005476:	b15b      	cbz	r3, 8005490 <__smakebuf_r+0x74>
 8005478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547c:	4630      	mov	r0, r6
 800547e:	f000 f92d 	bl	80056dc <_isatty_r>
 8005482:	b128      	cbz	r0, 8005490 <__smakebuf_r+0x74>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	89a0      	ldrh	r0, [r4, #12]
 8005492:	4305      	orrs	r5, r0
 8005494:	81a5      	strh	r5, [r4, #12]
 8005496:	e7cd      	b.n	8005434 <__smakebuf_r+0x18>
 8005498:	08005229 	.word	0x08005229

0800549c <memcpy>:
 800549c:	440a      	add	r2, r1
 800549e:	4291      	cmp	r1, r2
 80054a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054a4:	d100      	bne.n	80054a8 <memcpy+0xc>
 80054a6:	4770      	bx	lr
 80054a8:	b510      	push	{r4, lr}
 80054aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b2:	4291      	cmp	r1, r2
 80054b4:	d1f9      	bne.n	80054aa <memcpy+0xe>
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <memmove>:
 80054b8:	4288      	cmp	r0, r1
 80054ba:	b510      	push	{r4, lr}
 80054bc:	eb01 0402 	add.w	r4, r1, r2
 80054c0:	d902      	bls.n	80054c8 <memmove+0x10>
 80054c2:	4284      	cmp	r4, r0
 80054c4:	4623      	mov	r3, r4
 80054c6:	d807      	bhi.n	80054d8 <memmove+0x20>
 80054c8:	1e43      	subs	r3, r0, #1
 80054ca:	42a1      	cmp	r1, r4
 80054cc:	d008      	beq.n	80054e0 <memmove+0x28>
 80054ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054d6:	e7f8      	b.n	80054ca <memmove+0x12>
 80054d8:	4402      	add	r2, r0
 80054da:	4601      	mov	r1, r0
 80054dc:	428a      	cmp	r2, r1
 80054de:	d100      	bne.n	80054e2 <memmove+0x2a>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ea:	e7f7      	b.n	80054dc <memmove+0x24>

080054ec <__malloc_lock>:
 80054ec:	4801      	ldr	r0, [pc, #4]	; (80054f4 <__malloc_lock+0x8>)
 80054ee:	f7ff bf6d 	b.w	80053cc <__retarget_lock_acquire_recursive>
 80054f2:	bf00      	nop
 80054f4:	20000850 	.word	0x20000850

080054f8 <__malloc_unlock>:
 80054f8:	4801      	ldr	r0, [pc, #4]	; (8005500 <__malloc_unlock+0x8>)
 80054fa:	f7ff bf68 	b.w	80053ce <__retarget_lock_release_recursive>
 80054fe:	bf00      	nop
 8005500:	20000850 	.word	0x20000850

08005504 <_realloc_r>:
 8005504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005508:	4680      	mov	r8, r0
 800550a:	4614      	mov	r4, r2
 800550c:	460e      	mov	r6, r1
 800550e:	b921      	cbnz	r1, 800551a <_realloc_r+0x16>
 8005510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005514:	4611      	mov	r1, r2
 8005516:	f7ff b80b 	b.w	8004530 <_malloc_r>
 800551a:	b92a      	cbnz	r2, 8005528 <_realloc_r+0x24>
 800551c:	f7fe ff9c 	bl	8004458 <_free_r>
 8005520:	4625      	mov	r5, r4
 8005522:	4628      	mov	r0, r5
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	f000 f8fa 	bl	8005720 <_malloc_usable_size_r>
 800552c:	4284      	cmp	r4, r0
 800552e:	4607      	mov	r7, r0
 8005530:	d802      	bhi.n	8005538 <_realloc_r+0x34>
 8005532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005536:	d812      	bhi.n	800555e <_realloc_r+0x5a>
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7fe fff8 	bl	8004530 <_malloc_r>
 8005540:	4605      	mov	r5, r0
 8005542:	2800      	cmp	r0, #0
 8005544:	d0ed      	beq.n	8005522 <_realloc_r+0x1e>
 8005546:	42bc      	cmp	r4, r7
 8005548:	4622      	mov	r2, r4
 800554a:	4631      	mov	r1, r6
 800554c:	bf28      	it	cs
 800554e:	463a      	movcs	r2, r7
 8005550:	f7ff ffa4 	bl	800549c <memcpy>
 8005554:	4631      	mov	r1, r6
 8005556:	4640      	mov	r0, r8
 8005558:	f7fe ff7e 	bl	8004458 <_free_r>
 800555c:	e7e1      	b.n	8005522 <_realloc_r+0x1e>
 800555e:	4635      	mov	r5, r6
 8005560:	e7df      	b.n	8005522 <_realloc_r+0x1e>

08005562 <_raise_r>:
 8005562:	291f      	cmp	r1, #31
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4604      	mov	r4, r0
 8005568:	460d      	mov	r5, r1
 800556a:	d904      	bls.n	8005576 <_raise_r+0x14>
 800556c:	2316      	movs	r3, #22
 800556e:	6003      	str	r3, [r0, #0]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005578:	b112      	cbz	r2, 8005580 <_raise_r+0x1e>
 800557a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800557e:	b94b      	cbnz	r3, 8005594 <_raise_r+0x32>
 8005580:	4620      	mov	r0, r4
 8005582:	f000 f831 	bl	80055e8 <_getpid_r>
 8005586:	462a      	mov	r2, r5
 8005588:	4601      	mov	r1, r0
 800558a:	4620      	mov	r0, r4
 800558c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005590:	f000 b818 	b.w	80055c4 <_kill_r>
 8005594:	2b01      	cmp	r3, #1
 8005596:	d00a      	beq.n	80055ae <_raise_r+0x4c>
 8005598:	1c59      	adds	r1, r3, #1
 800559a:	d103      	bne.n	80055a4 <_raise_r+0x42>
 800559c:	2316      	movs	r3, #22
 800559e:	6003      	str	r3, [r0, #0]
 80055a0:	2001      	movs	r0, #1
 80055a2:	e7e7      	b.n	8005574 <_raise_r+0x12>
 80055a4:	2400      	movs	r4, #0
 80055a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055aa:	4628      	mov	r0, r5
 80055ac:	4798      	blx	r3
 80055ae:	2000      	movs	r0, #0
 80055b0:	e7e0      	b.n	8005574 <_raise_r+0x12>
	...

080055b4 <raise>:
 80055b4:	4b02      	ldr	r3, [pc, #8]	; (80055c0 <raise+0xc>)
 80055b6:	4601      	mov	r1, r0
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	f7ff bfd2 	b.w	8005562 <_raise_r>
 80055be:	bf00      	nop
 80055c0:	2000000c 	.word	0x2000000c

080055c4 <_kill_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d07      	ldr	r5, [pc, #28]	; (80055e4 <_kill_r+0x20>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	f7fb fcbd 	bl	8000f50 <_kill>
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	d102      	bne.n	80055e0 <_kill_r+0x1c>
 80055da:	682b      	ldr	r3, [r5, #0]
 80055dc:	b103      	cbz	r3, 80055e0 <_kill_r+0x1c>
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
 80055e2:	bf00      	nop
 80055e4:	20000854 	.word	0x20000854

080055e8 <_getpid_r>:
 80055e8:	f7fb bcaa 	b.w	8000f40 <_getpid>

080055ec <__sread>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	460c      	mov	r4, r1
 80055f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f4:	f000 f89c 	bl	8005730 <_read_r>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	bfab      	itete	ge
 80055fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005600:	181b      	addge	r3, r3, r0
 8005602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005606:	bfac      	ite	ge
 8005608:	6563      	strge	r3, [r4, #84]	; 0x54
 800560a:	81a3      	strhlt	r3, [r4, #12]
 800560c:	bd10      	pop	{r4, pc}

0800560e <__swrite>:
 800560e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005612:	461f      	mov	r7, r3
 8005614:	898b      	ldrh	r3, [r1, #12]
 8005616:	05db      	lsls	r3, r3, #23
 8005618:	4605      	mov	r5, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4616      	mov	r6, r2
 800561e:	d505      	bpl.n	800562c <__swrite+0x1e>
 8005620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005624:	2302      	movs	r3, #2
 8005626:	2200      	movs	r2, #0
 8005628:	f000 f868 	bl	80056fc <_lseek_r>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	4632      	mov	r2, r6
 800563a:	463b      	mov	r3, r7
 800563c:	4628      	mov	r0, r5
 800563e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	f000 b817 	b.w	8005674 <_write_r>

08005646 <__sseek>:
 8005646:	b510      	push	{r4, lr}
 8005648:	460c      	mov	r4, r1
 800564a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564e:	f000 f855 	bl	80056fc <_lseek_r>
 8005652:	1c43      	adds	r3, r0, #1
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	bf15      	itete	ne
 8005658:	6560      	strne	r0, [r4, #84]	; 0x54
 800565a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800565e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005662:	81a3      	strheq	r3, [r4, #12]
 8005664:	bf18      	it	ne
 8005666:	81a3      	strhne	r3, [r4, #12]
 8005668:	bd10      	pop	{r4, pc}

0800566a <__sclose>:
 800566a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566e:	f000 b813 	b.w	8005698 <_close_r>
	...

08005674 <_write_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d07      	ldr	r5, [pc, #28]	; (8005694 <_write_r+0x20>)
 8005678:	4604      	mov	r4, r0
 800567a:	4608      	mov	r0, r1
 800567c:	4611      	mov	r1, r2
 800567e:	2200      	movs	r2, #0
 8005680:	602a      	str	r2, [r5, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f7fb fc9b 	bl	8000fbe <_write>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d102      	bne.n	8005692 <_write_r+0x1e>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	b103      	cbz	r3, 8005692 <_write_r+0x1e>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	20000854 	.word	0x20000854

08005698 <_close_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d06      	ldr	r5, [pc, #24]	; (80056b4 <_close_r+0x1c>)
 800569c:	2300      	movs	r3, #0
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fb fca7 	bl	8000ff6 <_close>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_close_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_close_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20000854 	.word	0x20000854

080056b8 <_fstat_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	; (80056d8 <_fstat_r+0x20>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	f7fb fca2 	bl	800100e <_fstat>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d102      	bne.n	80056d4 <_fstat_r+0x1c>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b103      	cbz	r3, 80056d4 <_fstat_r+0x1c>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	20000854 	.word	0x20000854

080056dc <_isatty_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	; (80056f8 <_isatty_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb fca1 	bl	800102e <_isatty>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_isatty_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_isatty_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20000854 	.word	0x20000854

080056fc <_lseek_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d07      	ldr	r5, [pc, #28]	; (800571c <_lseek_r+0x20>)
 8005700:	4604      	mov	r4, r0
 8005702:	4608      	mov	r0, r1
 8005704:	4611      	mov	r1, r2
 8005706:	2200      	movs	r2, #0
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f7fb fc9a 	bl	8001044 <_lseek>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_lseek_r+0x1e>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_lseek_r+0x1e>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20000854 	.word	0x20000854

08005720 <_malloc_usable_size_r>:
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f18      	subs	r0, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfbc      	itt	lt
 800572a:	580b      	ldrlt	r3, [r1, r0]
 800572c:	18c0      	addlt	r0, r0, r3
 800572e:	4770      	bx	lr

08005730 <_read_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_read_r+0x20>)
 8005734:	4604      	mov	r4, r0
 8005736:	4608      	mov	r0, r1
 8005738:	4611      	mov	r1, r2
 800573a:	2200      	movs	r2, #0
 800573c:	602a      	str	r2, [r5, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f7fb fc20 	bl	8000f84 <_read>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_read_r+0x1e>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_read_r+0x1e>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000854 	.word	0x20000854

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr
